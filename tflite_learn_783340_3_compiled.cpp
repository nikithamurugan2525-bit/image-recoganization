/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.09.2025 06:14:54

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238544;
#else
constexpr int kTensorArenaSize = 237520;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0029819761402904987, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 45210, -51159, -46161, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00010898468462983146, 0.00011661600001389161, 0.00011435132182668895, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 81,69,115,-95,-68,5,-37,31,3,46,30,-55,-32,-111,100,24,-64,73,76,111,-27,-30,62,-93,-119,127,-60,5,85,15,-35,-6, 
  /* [1][0][][] */ 54,-27,-62,29,-2,127,-12,0,121,-42,5,-65,-63,107,42,-42,94,-40,-2,-89,-101,29,100,71,31,9,-1,-11,-76,-54,9,-21, 
  /* [2][0][][] */ -30,81,-73,84,87,-36,-27,116,93,42,127,4,-96,-77,88,119,-75,-47,12,-107,74,119,-59,-83,94,-58,-19,-112,11,-79,91,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.003239720594137907, 0.0034665719140321016, 0.0033992512617260218, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 205, 374, -383, 490, 449, 692, -338, 430, 564, -98, 433, -506, -198, -96, 371, 386, -164, -405, 28, -299, -45, 486, 181, -248, 521, 239, -240, -303, 570, 211, 405, -334, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.9170754209626466e-05, 5.4117856052471325e-05, 5.4162599553819746e-05, 5.6219629186671227e-05, 5.4235548304859549e-05, 5.0886686949525028e-05, 5.307162064127624e-05, 5.4659903980791569e-05, 5.5570424592588097e-05, 4.9009628128260374e-05, 5.6876022426877171e-05, 5.2152499847579747e-05, 5.546494503505528e-05, 4.9891990784090012e-05, 5.4531348723685369e-05, 5.2716397476615384e-05, 4.8616020649205893e-05, 5.2756746299564838e-05, 4.9435995606472716e-05, 5.1144852477591485e-05, 5.1224116759840399e-05, 5.1160794100724161e-05, 5.117944601806812e-05, 5.2683735702885315e-05, 5.5944099585758522e-05, 5.2324514399515465e-05, 5.2420549764065072e-05, 5.2018891437910497e-05, 5.3292547818273306e-05, 5.2729010349139571e-05, 5.3917356126476079e-05, 5.3933963499730453e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -40,-53,120,14,110,-14,-95,-109,68,-110,-121,2,65,13,-37,63,-63,-35,-74,-57,-77,-111,8,126,-127,13,86,-52,125,-3,-23,-87,93,-66,-100,72,-119,-85,-102,35,87,-91,-105,114,55,-120,118,-21, 
  /* [1][0][][] */ -51,39,-63,5,-32,89,46,17,89,-96,-99,113,74,-19,33,74,106,-33,44,127,-40,3,45,36,43,25,-44,115,18,12,105,-58,57,113,-1,36,60,69,-14,-59,-55,15,-15,-93,-29,44,-31,-56, 
  /* [2][0][][] */ 39,28,-71,84,-30,-70,79,86,-109,76,-45,107,85,-25,74,-121,-50,-36,25,45,-108,-24,103,12,-35,70,105,-1,-80,69,70,85,-65,-31,-103,-118,-96,85,97,-38,-127,-86,4,-11,-94,107,-35,-79, 
  /* [3][0][][] */ 81,13,51,-7,-55,64,-95,50,64,35,77,14,103,108,84,21,94,108,-42,28,127,-72,-51,-97,-7,-94,-78,118,59,-81,98,21,-56,-19,-1,1,-76,-9,53,62,-10,-74,-80,7,87,43,-32,-78, 
  /* [4][0][][] */ 61,112,12,66,-15,-11,44,27,73,101,4,62,39,-24,0,-53,-33,6,-52,26,120,-79,97,38,-6,9,54,-47,-35,49,-55,-40,57,127,27,-89,-38,6,-102,61,-37,-50,-61,-84,46,118,45,58, 
  /* [5][0][][] */ 102,-84,98,103,56,-108,44,59,127,-109,12,-69,21,120,50,54,66,71,-71,118,48,70,33,-19,-101,-59,-16,-83,66,44,31,-97,-39,17,-74,33,-109,-24,63,38,-81,-47,58,103,-21,38,51,-45, 
  /* [6][0][][] */ 15,-51,110,73,-90,-70,-7,63,-19,-88,3,-94,84,52,113,-126,47,-3,-4,100,-84,-126,107,55,-67,-88,-9,-63,-32,-120,44,-83,-92,-127,-51,-111,-14,36,-113,78,84,53,20,-18,-118,104,-90,-48, 
  /* [7][0][][] */ 124,78,-27,-32,-62,125,-9,8,127,14,-87,23,65,-77,55,84,44,26,8,123,65,45,4,96,-58,112,37,67,-67,117,-10,45,20,35,76,111,-95,97,0,-17,105,-67,95,73,61,7,111,-111, 
  /* [8][0][][] */ 18,45,-30,-74,71,40,-59,-10,21,51,57,104,11,-29,-70,-57,-82,105,-50,31,44,-11,92,121,-102,105,44,88,-52,33,-74,127,89,-17,59,12,127,17,-17,83,93,113,-94,-111,4,-14,-18,100, 
  /* [9][0][][] */ 4,-3,125,49,87,-121,-57,-127,43,51,-14,55,-27,-91,-115,-33,0,2,-111,-78,1,108,-123,-115,121,-12,-13,26,-15,-71,-104,109,70,-3,31,-24,-88,16,-43,-54,50,-79,59,-102,86,20,-122,54, 
  /* [10][0][][] */ -53,88,98,-54,-6,111,113,35,47,39,32,-58,104,88,-24,21,-41,87,-86,-50,-8,37,64,-57,41,62,-127,-98,-37,86,-80,-69,68,106,124,81,-30,16,-22,43,-24,120,-97,-31,-82,-46,6,-54, 
  /* [11][0][][] */ 106,0,-28,96,110,34,44,22,103,84,-93,104,-18,-100,17,-80,-62,-118,54,29,19,66,14,-127,-123,-113,-25,60,69,-22,15,-33,-91,-87,41,36,-78,65,-41,-75,-41,96,-90,0,-56,-74,-106,-100, 
  /* [12][0][][] */ 13,70,-59,-5,83,2,-40,28,-80,52,-10,17,-39,7,43,-82,-84,-32,-45,-84,21,-13,12,90,-55,-46,112,-98,86,11,-34,109,-70,-74,-46,10,-4,-77,-10,38,111,34,-115,-42,-6,-86,-26,127, 
  /* [13][0][][] */ 112,-60,111,107,101,125,90,62,80,-109,18,-35,92,79,69,-49,-126,-80,-82,28,75,-33,127,-56,-71,42,7,22,-96,-97,95,35,46,119,-27,49,-95,-29,41,81,-70,80,-57,9,-42,34,8,-26, 
  /* [14][0][][] */ -51,-89,98,79,87,-19,-5,-109,-69,-28,78,86,-25,-72,-82,-75,-62,-56,21,34,-33,41,7,71,-105,-62,-32,41,-104,-107,-72,47,105,-12,-28,16,104,127,43,-101,4,-102,44,94,77,-104,70,-94, 
  /* [15][0][][] */ 28,-19,-18,87,106,-78,74,-88,72,8,-63,21,122,14,-81,-104,87,22,-85,37,61,31,86,124,93,81,38,107,34,69,77,-92,-8,18,-53,6,-58,127,115,-60,27,127,-38,-17,35,-70,-42,-81, 
  /* [16][0][][] */ -83,4,114,-66,46,126,-59,38,55,56,-116,77,-20,-53,-62,-65,127,85,76,70,125,85,-45,54,-38,61,-71,72,-111,17,50,10,-113,90,60,72,-42,62,-40,-72,25,-55,81,98,74,117,125,-6, 
  /* [17][0][][] */ 29,-121,23,76,-53,-125,-77,-107,35,-100,78,43,94,55,-127,43,49,47,98,110,-106,-22,8,-61,15,61,-76,19,101,-65,-42,71,-20,-32,25,-3,-58,95,-99,-40,-108,-49,-24,-14,-3,4,82,-106, 
  /* [18][0][][] */ -99,110,118,-77,-9,-118,-113,13,-5,79,-121,-51,-41,36,68,-67,29,-21,66,-25,116,-50,23,-83,32,-106,-20,120,34,42,-1,51,48,-31,-112,-114,-36,35,-33,66,-46,1,-54,-9,-127,19,30,-5, 
  /* [19][0][][] */ 18,28,77,38,58,-92,99,94,96,-68,27,-14,-102,33,-61,60,97,-112,112,58,-26,82,-61,11,77,-87,33,-74,-99,-127,-71,46,89,-90,32,-4,6,-76,-59,-108,44,-125,-90,10,-93,29,84,-92, 
  /* [20][0][][] */ -2,70,74,94,-88,97,15,71,14,6,-98,10,2,87,47,-80,-58,-34,-64,-29,21,-43,-82,-67,84,-73,-110,48,24,14,-50,127,97,36,-9,47,48,-39,-29,-123,-88,-29,-97,-102,-39,-72,-82,104, 
  /* [21][0][][] */ 106,90,87,-98,113,-70,88,27,8,-59,-67,52,11,51,-45,-85,-127,-24,38,-4,125,-42,85,-78,72,-81,-42,89,26,15,2,-13,-1,33,-88,-109,127,113,-119,-24,3,18,40,-12,-92,-77,-78,86, 
  /* [22][0][][] */ 47,-49,-73,-98,106,-47,119,67,-97,97,-74,-102,127,-118,-108,-90,50,96,-109,-52,99,-75,38,49,105,-2,-109,112,-59,-79,-68,-112,65,70,25,18,7,-14,-58,-122,5,-1,6,112,62,-121,99,-19, 
  /* [23][0][][] */ 60,-89,-1,54,93,-122,-2,-114,50,-89,82,73,11,-117,11,-47,96,-39,-117,95,91,-91,101,-45,-19,-22,83,16,66,45,71,-48,-45,41,13,33,93,-14,-107,1,-116,-9,2,-116,-72,-96,127,33, 
  /* [24][0][][] */ -71,-39,-88,-55,-71,-96,-54,-80,78,127,93,54,121,74,-27,-100,-88,53,37,-39,107,-66,-43,-24,64,-15,68,69,117,66,17,-50,-6,23,59,42,-40,-70,71,-6,-59,-85,113,7,34,-23,55,72, 
  /* [25][0][][] */ -80,-44,-74,-5,105,-68,-108,58,42,-119,-37,31,83,-1,-110,-8,-62,69,43,-107,75,94,-6,-48,27,-46,-95,42,83,-91,46,127,111,-111,53,76,109,-59,-15,-13,-81,116,-110,9,102,43,73,46, 
  /* [26][0][][] */ 48,-120,-24,-14,-103,-5,-12,-15,-113,-127,108,87,-85,-51,9,-16,113,27,-90,-70,13,72,100,14,54,64,9,46,13,5,-98,-3,-36,-64,-105,-110,-70,86,-60,112,-104,107,57,32,-81,74,-47,98, 
  /* [27][0][][] */ 9,11,-70,-112,-127,-78,-77,-21,40,98,34,-115,-28,54,81,-33,68,-21,61,-90,-102,7,-34,-27,-112,45,-111,-7,64,25,-39,-14,65,66,-96,-95,-97,-72,-119,88,-103,17,24,17,97,21,67,105, 
  /* [28][0][][] */ 107,0,99,53,-110,-54,-95,-63,-42,-104,74,82,-69,-78,17,103,108,127,-58,85,-17,36,-96,-71,-120,85,-71,-60,-70,-70,10,-6,-90,23,93,87,29,-98,-30,33,112,41,-83,67,-95,1,25,62, 
  /* [29][0][][] */ 64,73,70,-43,-77,25,-116,10,99,-16,-84,-85,124,-106,-41,-30,-90,114,43,-58,-67,-25,63,23,-18,23,-39,-24,-89,-1,114,8,60,16,-66,-52,-1,116,9,107,61,127,-44,88,6,109,-39,-9, 
  /* [30][0][][] */ 34,-61,-52,46,-90,33,-53,-5,126,-6,9,-34,-93,27,69,19,-10,45,102,-92,51,-91,-105,23,-102,35,-79,127,-2,-99,-83,16,-94,-60,-109,-44,24,-6,-1,36,100,-68,-1,105,116,-34,109,50, 
  /* [31][0][][] */ 81,-99,33,97,47,59,-64,-104,-35,-24,-84,-89,98,-127,-52,107,-44,-92,34,46,59,32,-35,103,41,-120,50,36,-77,-79,45,105,36,17,-97,-12,94,-36,-73,-116,56,-74,-35,31,4,-59,-35,37, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0020897570066154003, 0.0023000088986009359, 0.0023019104264676571, 0.0023893341422080994, 0.002305010799318552, 0.0021626842208206654, 0.0022555438335984945, 0.0023230458609759808, 0.0023617430124431849, 0.0020829092245548964, 0.0024172309786081314, 0.0022164811380207539, 0.0023572600912302732, 0.0021204096265137196, 0.0023175822570919991, 0.002240446861833334, 0.0020661808084696531, 0.0022421616595238447, 0.0021010297350585461, 0.0021736561320722103, 0.0021770249586552382, 0.0021743336692452431, 0.0021751264575868845, 0.0022390587255358696, 0.0023776241578161716, 0.0022237917874008417, 0.002227873308584094, 0.0022108028642833233, 0.0022649331949651241, 0.0022409828379750252, 0.002291487529873848, 0.0022921934723854065, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { 1778, -1155, 3482, 2449, 3043, 189, 2606, 3167, -2134, -1335, -931, 8745, 2973, 3709, 6671, -3977, -2890, 7452, 2409, 4469, 4230, 18486, 17194, 803, -1465, 2024, -601, -854, 3102, 2151, 4209, 5752, -1649, 514, 12388, 3717, 7442, 2150, 1095, -1420, 3720, -1641, 9140, -555, 290, 2073, -1297, 3979, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00020354868320282549, 0.0002832468890119344, 0.00021809656755067408, 0.00021056414698250592, 0.00016379014414269477, 0.00022893468849360943, 0.00012907310156151652, 0.00023073857300914824, 0.00020042718097101897, 0.00025225835270248353, 0.00032987500890158117, 8.8986416812986135e-05, 0.00022469850955531001, 0.00016761930601205677, 0.0001271213695872575, 0.00014242963516153395, 0.00020670636149588972, 0.00013460927584674209, 0.00024730616132728755, 0.0001726396003505215, 0.00019351554510649294, 5.6666754971956834e-05, 5.8509318478172645e-05, 0.00029878850909881294, 0.00025532874860800803, 0.00014927210577297956, 0.00017107996973209083, 0.00022899573377799243, 0.00013462698552757502, 0.00020136852981522679, 0.00015285379777196795, 0.00015104089106898755, 0.00014301518967840821, 0.00021948695939499885, 7.5445350375957787e-05, 0.00016696265083737671, 0.00011553293734323233, 0.0002792169398162514, 0.00031181241502054036, 0.00024225824745371938, 0.00016250599583145231, 0.00028107210528105497, 9.5830284408293664e-05, 0.00023601055727340281, 0.00037205714033916593, 0.00025081366766244173, 0.00031938662868924439, 0.00017939445388037711, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -9,16,127,-14,-6,52,0,-89, 
  /* [1][0][][] */ 89,-57,60,-72,-20,-71,127,20, 
  /* [2][0][][] */ 62,63,69,-64,-60,22,127,-21, 
  /* [3][0][][] */ -3,22,9,-27,23,-70,127,11, 
  /* [4][0][][] */ 127,-45,-59,-38,-94,-62,-25,77, 
  /* [5][0][][] */ 31,78,127,0,21,-47,32,-44, 
  /* [6][0][][] */ 110,111,-16,127,-81,24,24,95, 
  /* [7][0][][] */ -33,-10,1,33,37,-116,-127,-34, 
  /* [8][0][][] */ 120,78,-50,87,-63,24,-127,-51, 
  /* [9][0][][] */ 127,-23,-34,42,0,-40,18,-85, 
  /* [10][0][][] */ 71,23,-7,14,-26,127,36,10, 
  /* [11][0][][] */ 126,-23,-10,-127,96,-69,-59,76, 
  /* [12][0][][] */ -55,113,73,-34,10,62,-84,127, 
  /* [13][0][][] */ 127,5,-91,19,24,-84,38,-95, 
  /* [14][0][][] */ 110,28,2,-23,-127,34,-84,-12, 
  /* [15][0][][] */ 4,13,-102,-29,-127,-59,121,103, 
  /* [16][0][][] */ -3,-54,116,-4,127,-45,-63,-38, 
  /* [17][0][][] */ 25,-12,77,-7,127,-57,-62,-4, 
  /* [18][0][][] */ 102,-44,127,42,-25,33,-41,2, 
  /* [19][0][][] */ 66,47,52,-60,-36,-127,21,-41, 
  /* [20][0][][] */ 47,-30,48,127,6,-66,-68,72, 
  /* [21][0][][] */ 82,-18,-65,-127,55,-55,4,106, 
  /* [22][0][][] */ -38,-122,-71,-51,51,-43,127,-81, 
  /* [23][0][][] */ -8,25,26,-41,-110,-127,9,-27, 
  /* [24][0][][] */ 127,8,62,51,-14,-30,-97,73, 
  /* [25][0][][] */ 114,76,-27,-66,-33,-24,-17,127, 
  /* [26][0][][] */ -83,-32,23,-127,104,2,-46,-80, 
  /* [27][0][][] */ 104,127,-10,-49,7,57,31,2, 
  /* [28][0][][] */ 23,127,-3,1,7,-66,-19,125, 
  /* [29][0][][] */ 127,30,97,122,46,-45,-124,53, 
  /* [30][0][][] */ 127,-119,-79,110,62,9,-80,102, 
  /* [31][0][][] */ 91,-83,26,48,-79,-101,-127,59, 
  /* [32][0][][] */ -103,-75,25,-127,80,-13,-41,-93, 
  /* [33][0][][] */ 26,7,23,35,26,-69,127,36, 
  /* [34][0][][] */ -64,102,116,-87,127,-103,-76,123, 
  /* [35][0][][] */ -63,26,13,124,-2,127,45,-24, 
  /* [36][0][][] */ 87,30,-30,-127,39,-8,21,41, 
  /* [37][0][][] */ 46,47,-13,9,-76,127,64,42, 
  /* [38][0][][] */ -24,-68,27,106,21,55,1,127, 
  /* [39][0][][] */ 22,4,-127,45,-9,-39,-24,63, 
  /* [40][0][][] */ 70,21,-98,8,-55,48,-51,127, 
  /* [41][0][][] */ 37,5,14,-42,-107,-127,-10,-4, 
  /* [42][0][][] */ -88,60,-91,114,-9,96,-30,-127, 
  /* [43][0][][] */ -15,-2,-25,-127,-19,9,-13,-73, 
  /* [44][0][][] */ 74,32,21,77,24,127,-47,34, 
  /* [45][0][][] */ 0,74,-23,17,127,-31,-74,-10, 
  /* [46][0][][] */ 65,-66,-1,127,71,23,-42,76, 
  /* [47][0][][] */ -13,-96,48,-21,127,23,43,29, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0023129729088395834, 0.0032186028547585011, 0.0024782840628176928, 0.0023926913272589445, 0.0018611870473250747, 0.0026014402974396944, 0.0014666889328509569, 0.0026219382416456938, 0.0022775025572627783, 0.0028664725832641125, 0.0037484494969248772, 0.0010111741721630096, 0.0025533034931868315, 0.0019046987872570753, 0.0014445108827203512, 0.0016184623818844557, 0.0023488544393330812, 0.0015295977937057614, 0.0028101997449994087, 0.0019617455545812845, 0.0021989638917148113, 0.00064391805790364742, 0.00066485552815720439, 0.0033952060621231794, 0.0029013622552156448, 0.0016962150111794472, 0.0019440230680629611, 0.0026021338999271393, 0.0015297989593818784, 0.0022881992626935244, 0.0017369146225973964, 0.0017163141164928675, 0.001625116216018796, 0.002494083484634757, 0.00085730379214510322, 0.0018972370307892561, 0.0013128287391737103, 0.003172809723764658, 0.0035431999713182449, 0.0027528391219675541, 0.0018465949688106775, 0.003193890443071723, 0.0010889427503570914, 0.0026818451005965471, 0.0042277751490473747, 0.0028500563930720091, 0.0036292676813900471, 0.0020385026000440121, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { -9934, -2334, -566, -10403, 1897, -2475, 10567, 9188, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00014840012590866536, 0.00020712219702545553, 7.693900988670066e-05, 0.00012259114009793848, 7.7513621363323182e-05, 0.00016093679005280137, 9.7408905276097357e-05, 0.00015232909936457872, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-26,19,-25,27,56,11,34,106,-80,55,11,-41,60,16,-49,15,-24,-22,-13,7,-61,10,-19,-54,-37,-35,-34,-30,76,-21,36,23,-35,11,-29,62,-64,-50,10,26,-18,-69,0,61,-29,54,-38, 
  /* [1][0][][] */ 50,-3,-12,63,56,62,20,29,64,-80,-1,8,44,18,-40,-16,-33,-41,-68,-2,3,-47,51,78,-4,-62,-1,43,-26,54,-54,127,-25,47,-20,-21,-61,-16,-6,-22,-48,-16,-33,39,23,-8,5,-85, 
  /* [2][0][][] */ -41,-29,-82,38,-77,-26,-8,42,-106,-86,-90,-34,-32,42,-127,-9,76,-86,33,-16,116,77,-24,7,51,94,20,-90,-49,4,65,2,-30,44,65,-66,62,-4,84,97,-46,101,46,1,-75,70,-43,65, 
  /* [3][0][][] */ -1,-25,-11,40,-21,7,-7,44,70,93,-127,-26,24,-25,-24,75,-53,-15,-4,54,-26,4,79,20,4,8,-49,56,-34,21,-37,-23,14,31,34,14,52,-7,49,6,-55,88,73,20,30,-15,-28,-39, 
  /* [4][0][][] */ -25,-73,22,-45,-1,96,-62,-74,2,-49,78,33,-60,-22,-12,31,67,8,-31,50,-73,-26,122,-19,-98,-17,-12,15,21,-24,-11,64,-57,48,-28,59,-31,39,-4,23,-35,40,-34,41,127,60,-7,6, 
  /* [5][0][][] */ -65,-63,55,-127,-22,21,-35,-57,-1,74,-51,73,-83,22,51,11,71,57,71,11,31,1,-14,-71,42,-76,1,-48,-13,-36,38,-80,-12,-46,52,-5,-18,33,37,62,96,10,18,-30,-17,-11,-30,34, 
  /* [6][0][][] */ -67,-59,42,24,-57,-61,4,-67,-99,10,-127,34,21,-44,49,16,-29,15,18,116,-15,-6,74,49,-73,-16,58,19,19,-31,-34,-67,-33,58,65,-90,-46,80,50,-30,-74,60,75,-57,-5,-42,-40,-1, 
  /* [7][0][][] */ 19,-5,13,-10,12,27,-39,-45,-127,-32,94,24,10,-29,26,1,17,40,4,-16,-46,11,-10,-37,36,0,-35,15,-10,-20,-24,-45,-102,-49,-37,8,55,-29,-21,4,53,6,49,-16,20,-40,40,15, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0063070054166018963, 0.0088026933372020721, 0.0032699077855795622, 0.0052101234905421734, 0.0032943286933004856, 0.0068398131988942623, 0.0041398783214390278, 0.0064739864319562912, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { -833, 1575, 9554, 3391, -534, -4432, -568, 10351, 7837, -3231, -3116, -5097, -1899, 13642, 8913, 63, 5170, -4654, 4224, -1295, 14543, -2405, -1180, -1729, 2345, -2620, 391, -2554, 6808, -24787, -2978, 668, -4370, -1706, -1899, -1273, 7866, -6284, 1830, -10534, -1821, 4127, -4913, -1083, 1607, -1984, 6118, -3035, };
const TfArray<48, float> quant10_scale = { 48, { 0.00033400824759155512, 0.00018702485249377787, 0.00010418451711302623, 0.00010241784912068397, 0.00021145660139154643, 0.00013296300312504172, 0.00031858848524279892, 0.00013526630937121809, 0.00015191019338089973, 0.00041211480856873095, 0.00035759623278863728, 7.4443159974180162e-05, 0.00037035933928564191, 7.9267250839620829e-05, 0.00013713014777749777, 0.00024338759249076247, 0.00018239987548440695, 0.00019800334121100605, 0.00014701233885716647, 0.00025410481612198055, 9.3498783826362342e-05, 0.00028164114337414503, 0.00023400240752380341, 0.00025391267263330519, 0.0001989738957490772, 0.00045065858284942806, 0.00027136586140841246, 0.00044270401122048497, 8.7857828475534916e-05, 9.9492644949350506e-05, 0.00019059337500948459, 0.00021616874437313527, 0.00010382312757428735, 0.00039628866943530738, 0.00012915264233015478, 0.0001305561454501003, 0.00020023633260279894, 0.00013023504288867116, 7.1829490480013192e-05, 9.6218966064043343e-05, 0.00025414701667614281, 0.0001931678707478568, 0.00026941631222143769, 0.00022627468570135534, 0.00019018848252017051, 0.00010748997010523453, 0.00022728255135007203, 0.0001983492256840691, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 72,73,-30,60,3,-4,-57,12,37,-64,35,11,17,-110,-35,33,102,36,-74,-1,94,14,-18,-11,74,24,17,-4,-70,34,-9,-58,127,11,127,23,-35,28,123,36,-72,77,-97,-51,36,-100,-33,2, 90,127,-71,104,22,56,-78,-127,50,58,127,44,-10,-23,-23,-12,-67,127,-94,24,66,127,40,-21,29,11,4,127,-127,105,-26,-127,7,-31,35,90,-76,127,127,51,-127,-73,73,-5,16,21,-127,110, 49,40,-17,34,6,-3,-40,23,28,-84,33,11,14,-76,-26,-27,90,-18,-37,-11,89,19,-23,46,52,57,12,-4,-21,23,-18,-36,116,18,98,14,-15,27,101,3,-43,78,54,64,39,96,18,-14, 
  /* [0][1][][] */ -24,-54,-127,108,21,55,70,-28,36,47,-46,127,127,-1,-30,-78,-30,83,73,-16,-110,13,30,-98,28,47,17,11,-14,108,22,50,68,127,33,37,-85,-4,-61,79,87,-3,80,-111,15,-112,-4,127, 40,-100,-27,-127,127,15,127,-84,-127,127,3,73,-108,127,127,-20,-127,75,10,127,32,-5,127,-3,-127,127,30,-80,-89,46,-127,102,117,-94,31,127,127,57,-12,127,126,-78,-21,4,122,-80,0,45, -13,-52,-113,55,-15,127,51,-20,31,34,-39,66,-13,16,-33,-21,-68,80,127,-39,-127,16,-59,127,5,19,19,31,48,94,38,37,11,-4,-46,-112,-45,-23,-16,20,45,63,-15,127,-8,120,-19,93, 
  /* [0][2][][] */ -35,-30,-11,19,-11,13,-16,1,26,-30,4,4,38,-89,-40,34,86,12,18,7,-74,21,0,3,21,-1,-8,2,1,10,38,4,25,12,127,-2,-12,67,81,46,11,75,127,-23,-52,-127,3,-18, -127,-14,-94,40,-127,8,-71,-16,19,113,-78,53,-15,-34,-18,127,-95,49,-94,-30,-95,23,3,-24,-17,64,-127,-22,-64,127,58,18,45,-25,25,23,-25,58,-48,60,-68,-127,-104,-32,-127,70,-89,100, -28,-33,-6,13,9,0,-13,0,17,-61,-10,-20,-1,-77,-23,3,90,-30,100,16,-81,-6,6,40,19,-9,-10,-7,11,6,38,6,44,11,75,26,-3,62,93,7,15,76,-50,50,-33,107,3,-47, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.014195349998772144, 0.0079485559836030006, 0.0044278418645262718, 0.0043527586385607719, 0.0089869052171707153, 0.0056509277783334255, 0.013540010899305344, 0.0057488181628286839, 0.0064561832696199417, 0.017514878883957863, 0.015197839587926865, 0.003163834335282445, 0.015740271657705307, 0.0033688580151647329, 0.0058280308730900288, 0.010343972593545914, 0.0077519947662949562, 0.0084151420742273331, 0.0062480242922902107, 0.010799454525113106, 0.0039736982434988022, 0.011969747953116894, 0.0099451020359992981, 0.010791288688778877, 0.0084563903510570526, 0.019152989611029625, 0.011533048935234547, 0.018814919516444206, 0.003733957652002573, 0.0042284373193979263, 0.0081002181395888329, 0.0091871712356805801, 0.0044124829582870007, 0.016842268407344818, 0.0054889870807528496, 0.0055486359633505344, 0.0085100438445806503, 0.0055349892936646938, 0.0030527531635016203, 0.0040893061086535454, 0.010801248252391815, 0.0082096345722675323, 0.011450192891061306, 0.0096166739240288734, 0.0080830100923776627, 0.0045683234930038452, 0.0096595082432031631, 0.0084298420697450638, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { 26490, 4305, 894, 988, 4129, 1383, 4750, 3460, 2469, -4432, 9509, 763, 7034, 1778, 3428, 1635, 5455, -540, 6513, 241, 2649, -566, 2438, 4187, 1639, -2847, 1731, 8305, 660, 5382, 1460, 7884, 451, 3765, -201, -1186, 2110, 2536, 210, 1364, 10078, -700, 11326, 2634, 779, 4277, 3557, -1081, };
const TfArray<48, float> quant12_scale = { 48, { 4.0820577851263806e-05, 0.00019243036513216794, 0.00028884547646157444, 0.0002273638965561986, 0.00017802442016545683, 0.00031549626146443188, 0.00017146360187325627, 0.00020274129929021001, 0.00018688483396545053, 0.00016707534086890519, 0.00010151958849746734, 0.00030010903719812632, 0.00011476552754174918, 0.0002122603909811005, 0.00019288169278297573, 0.00022319903655443341, 0.00013313093222677708, 0.00029710688977502286, 0.00014020345406606793, 0.00020323209173511714, 0.00025285183801315725, 0.00020166194008197635, 0.00021281311637721956, 0.00016869846149347723, 0.00025123957311734557, 0.00021504009782802314, 0.00026554250507615507, 0.00011333539441693574, 0.00023979526304174215, 0.00015008155605755746, 0.00022876467846799642, 0.00012081750901415944, 0.00028847676003351808, 0.00020895249326713383, 0.00022045917285140604, 0.0003155942540615797, 0.00027547928038984537, 0.00015986064681783319, 0.00032041539088822901, 0.000231820551562123, 9.1915222583338618e-05, 0.00025435510906390846, 7.6732845627702773e-05, 0.00016769327339716256, 0.00026588930631987751, 0.00018181462655775249, 0.00017998502880800515, 0.0002722836215980351, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,46,-13,-19,66,39,3,-52, 
  /* [1][0][][] */ -9,-56,-28,-13,-61,-127,9,20, 
  /* [2][0][][] */ -72,66,0,-54,-48,39,-59,127, 
  /* [3][0][][] */ 53,40,55,-21,-46,-127,46,-16, 
  /* [4][0][][] */ 23,67,-127,37,-122,91,41,30, 
  /* [5][0][][] */ -27,49,26,-28,-87,-127,-55,-9, 
  /* [6][0][][] */ -54,127,102,-32,-69,-38,24,-43, 
  /* [7][0][][] */ -9,-3,40,66,1,-127,-9,53, 
  /* [8][0][][] */ 127,31,-74,79,-84,-69,-103,-3, 
  /* [9][0][][] */ 95,-36,-60,-66,2,-25,-40,127, 
  /* [10][0][][] */ -91,4,9,127,7,75,27,-102, 
  /* [11][0][][] */ 23,16,61,-20,9,120,127,101, 
  /* [12][0][][] */ -67,-81,-47,-85,127,-32,-12,42, 
  /* [13][0][][] */ -22,-5,-14,45,22,-127,45,63, 
  /* [14][0][][] */ 72,77,121,14,77,-127,-86,-21, 
  /* [15][0][][] */ -40,75,127,62,-16,23,42,-82, 
  /* [16][0][][] */ -90,-37,44,-73,127,14,-53,-7, 
  /* [17][0][][] */ 36,-47,-44,2,-13,127,-28,39, 
  /* [18][0][][] */ -28,127,83,-55,-56,49,80,-98, 
  /* [19][0][][] */ 16,106,84,127,-26,29,39,31, 
  /* [20][0][][] */ 13,8,66,-127,-65,1,67,-21, 
  /* [21][0][][] */ -105,84,37,-127,121,71,126,1, 
  /* [22][0][][] */ 83,-28,-104,81,51,-56,-57,127, 
  /* [23][0][][] */ 39,-76,-127,-35,59,-14,-56,93, 
  /* [24][0][][] */ 45,-19,-103,21,-65,35,-127,124, 
  /* [25][0][][] */ -11,-20,52,8,127,-16,-93,-53, 
  /* [26][0][][] */ 5,92,127,-35,-36,-22,55,-60, 
  /* [27][0][][] */ -45,37,127,-84,31,16,95,-119, 
  /* [28][0][][] */ 63,-5,85,127,69,-32,38,97, 
  /* [29][0][][] */ 76,81,107,26,-67,29,-127,97, 
  /* [30][0][][] */ 50,-2,-93,68,-127,-36,-47,54, 
  /* [31][0][][] */ 27,127,88,-56,-77,37,110,-116, 
  /* [32][0][][] */ 59,-19,-9,24,102,127,29,-31, 
  /* [33][0][][] */ 17,-40,-127,5,26,-17,-40,75, 
  /* [34][0][][] */ 27,-56,22,-127,-4,74,-17,8, 
  /* [35][0][][] */ -28,21,91,-7,16,-127,-2,-21, 
  /* [36][0][][] */ -7,13,-32,-127,-12,13,9,-43, 
  /* [37][0][][] */ 60,-17,-18,-89,-80,127,-63,-77, 
  /* [38][0][][] */ 82,-61,-25,98,64,29,-30,127, 
  /* [39][0][][] */ 127,91,32,77,-11,93,-43,-2, 
  /* [40][0][][] */ 43,-127,-125,-34,9,11,-60,127, 
  /* [41][0][][] */ -8,-61,-127,-108,-1,-75,-42,-15, 
  /* [42][0][][] */ 56,109,85,127,-76,-35,32,48, 
  /* [43][0][][] */ 127,-43,-116,-126,-71,-39,26,70, 
  /* [44][0][][] */ 3,87,100,-67,-83,-7,76,-127, 
  /* [45][0][][] */ 45,26,-127,62,-43,34,21,67, 
  /* [46][0][][] */ 47,-47,-71,-127,21,-27,-38,46, 
  /* [47][0][][] */ 83,-112,127,-56,70,-22,4,4, 
};
const TfArray<48, float> quant13_scale = { 48, { 0.00050033145816996694, 0.0023585890885442495, 0.0035403340589255095, 0.0027867639437317848, 0.0021820175461471081, 0.0038669884670525789, 0.0021016027312725782, 0.0024849686305969954, 0.0022906183730810881, 0.0020478165242820978, 0.0012443098239600658, 0.0036783895920962095, 0.0014066632138565183, 0.0026016426272690296, 0.0023641209118068218, 0.0027357158251106739, 0.0016317651607096195, 0.003641593037173152, 0.0017184519674628973, 0.0024909840431064367, 0.0030991656240075827, 0.0024717389605939388, 0.0026084173005074263, 0.0020677107386291027, 0.0030794043559581041, 0.002635712968185544, 0.0032547132577747107, 0.001389134326018393, 0.0029391332063823938, 0.001839526230469346, 0.0028039331082254648, 0.0014808414271101356, 0.0035358145833015442, 0.0025610981974750757, 0.0027021337300539017, 0.0038681896403431892, 0.0033765067346394062, 0.0019593869801610708, 0.003927281592041254, 0.0028413883410394192, 0.0011265905341133475, 0.0031175911426544189, 0.00094050250481814146, 0.0020553902722895145, 0.0032589638140052557, 0.0022284735459834337, 0.0022060484625399113, 0.0033373378682881594, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { -11900, -35530, 655, 5719, -16444, 835, -23602, -197, };
const TfArray<8, float> quant14_scale = { 8, { 0.00017198880959767848, 6.8596600613091141e-05, 6.4870087953750044e-05, 6.5645122958812863e-05, 7.5214447861071676e-05, 6.8416811700444669e-05, 6.0851696616737172e-05, 8.2267994002904743e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 46,53,-82,52,16,23,-95,-32,8,-19,-3,-40,-18,-1,48,3,51,-19,48,-22,20,-33,45,-1,12,-30,-18,21,-16,-2,-20,3,51,24,19,12,127,64,32,-27,1,-18,-7,-25,79,27,19,-50, 
  /* [1][0][][] */ 66,32,12,-4,35,92,-15,-20,35,67,-43,-73,115,-18,22,57,28,35,26,-90,126,-22,45,55,44,29,49,27,26,-69,61,85,63,117,17,127,71,37,25,27,92,20,39,39,21,45,118,-72, 
  /* [2][0][][] */ -22,16,76,127,-45,24,-1,61,32,69,19,-74,-43,111,28,38,-78,-94,75,2,-3,60,-53,-84,-29,-37,27,-5,-109,23,-3,-4,-32,-26,-83,-48,17,29,-84,-22,-23,-56,-35,27,64,-79,-30,24, 
  /* [3][0][][] */ -27,54,-76,-13,21,-74,8,67,107,-78,-44,14,-4,-19,15,60,25,6,-16,-21,-4,20,-73,38,-23,-33,41,-5,60,-35,43,-47,39,-15,-31,-51,-127,1,-78,14,-22,-52,38,-7,-56,12,-13,-36, 
  /* [4][0][][] */ 55,-24,32,-28,-63,75,31,69,-120,-48,60,40,75,-53,-73,-70,87,68,66,-28,24,-93,-15,50,-27,8,-48,-127,-49,-57,96,38,79,2,107,86,65,66,54,39,11,40,-46,-33,90,74,87,-48, 
  /* [5][0][][] */ 35,83,14,100,28,29,-48,-100,-105,29,-11,-1,22,68,35,-76,78,112,-32,34,-15,-71,-16,-71,-106,-78,-45,57,-5,50,-30,37,-4,-87,71,4,-38,127,-40,-120,-14,-40,-12,-42,-7,-16,-46,102, 
  /* [6][0][][] */ 112,49,-5,127,-88,23,13,63,17,-91,71,86,77,-44,-29,-53,63,26,-76,21,70,-28,-29,-5,7,69,-45,-46,18,-40,60,52,23,-42,-2,88,101,-86,5,7,-85,71,-106,56,57,107,102,-55, 
  /* [7][0][][] */ 19,20,127,44,-33,63,-91,8,-36,101,-12,-11,44,61,18,-7,-50,-12,-61,9,-11,37,3,-44,-10,40,52,-11,1,1,20,-8,-88,-14,62,29,90,2,38,-15,-23,-30,-33,-54,-3,-32,8,25, 
};
const TfArray<8, float> quant15_scale = { 8, { 0.007309524342417717, 0.0029153556097298861, 0.0027569786179810762, 0.0027899176348000765, 0.0031966138631105423, 0.0029077143408358097, 0.0025861971080303192, 0.0034963896032422781, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 11313, -15102, -670, 1632, -1015, 11904, 2572, -1539, -7553, 1567, -2319, -1976, -6530, -12626, 3684, -323, -7398, 26039, -2386, -9985, 11428, -629, -188, 464, 182, 648, -3753, -860, -1141, 551, 968, 19440, 11486, -826, 4639, 14153, -387, 15509, 949, 369, -2829, -7322, -1954, 1681, 2515, 22780, 11075, -3368, };
const TfArray<48, float> quant16_scale = { 48, { 0.00011310179252177477, 8.0690202594269067e-05, 0.0013603871921077371, 0.00029691681265830994, 0.00021652747818734497, 0.00016308359045069665, 0.00015407317550852895, 0.00045984433381818235, 0.00013319052231963724, 0.00037759641418233514, 0.00021690620633307844, 0.00014567087055183947, 0.00017432602180633694, 0.00010920860950136557, 0.00021544299670495093, 0.00011438811634434387, 8.4667859482578933e-05, 6.9382229412440211e-05, 0.0004677334800362587, 5.3563253459287807e-05, 0.00012246181722730398, 0.00044086645357310772, 0.00023995288938749582, 0.00023938875528983772, 0.00031285500153899193, 0.00028346857288852334, 0.00021281949011608958, 0.00030834352946840227, 0.0003205294196959585, 0.00021116893913131207, 0.00014121418644208461, 0.0001092028760467656, 0.00013384252088144422, 0.00024483073502779007, 0.00013843046326655895, 0.00014674899284727871, 0.00067163637140765786, 0.00017795998428482562, 0.00015344937855843455, 0.00041522891842760146, 0.00014549086336046457, 0.0001459709310438484, 0.00025412172544747591, 0.00017827718693297356, 0.00023599719861522317, 5.9145477280253544e-05, 0.00014857019414193928, 0.00021492908126674592, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -59,10,31,12,127,-47,17,9,8,32,44,-17,3,8,-53,19,88,-30,-16,53,-28,8,-46,-13,-18,-2,35,-39,-24,127,25,-81,-38,101,114,-63,9,-48,-127,-32,12,-20,-8,-67,-2,-37,-127,23, -67,85,-9,36,-9,-89,103,-17,82,15,75,127,63,127,-9,34,121,-74,8,75,-43,-24,105,-105,0,41,-96,26,-25,-88,123,-127,-127,-90,8,-19,-62,-31,-111,21,-54,-31,22,-127,26,-79,35,47, -17,3,4,1,47,-53,17,-2,18,25,16,-50,-13,-2,-47,29,71,-21,-12,57,-19,-1,-57,-5,20,-4,33,-95,-34,46,-52,-79,16,-8,100,-42,12,-39,-88,7,18,-4,2,-51,-15,-69,-121,-25, 
  /* [0][1][][] */ -127,123,-15,-64,11,-89,7,-7,31,20,50,41,75,106,-50,45,127,-127,17,72,-17,-52,-92,-41,-127,-7,-26,16,-7,1,79,-67,-61,127,-114,-78,35,-73,39,63,-98,28,-72,62,-15,-127,13,-44, 7,105,127,127,-37,94,-127,127,127,-127,-56,81,127,110,127,-100,-50,-112,127,4,-127,127,127,0,93,108,75,127,127,-80,127,9,-65,-103,-32,-127,127,127,97,64,-49,127,-22,82,127,48,0,-127, -69,63,-37,-50,-54,-127,11,-22,-6,6,127,38,33,99,-37,127,112,-114,-6,103,44,-77,-94,-42,23,-16,-20,22,-5,14,83,-43,-10,-32,-127,-54,22,-85,45,-127,-69,36,127,73,-32,-114,-3,107, 
  /* [0][2][][] */ -17,0,1,-8,33,-37,27,4,25,28,127,36,12,-2,-26,102,72,-44,-43,16,-19,6,-49,37,-20,-15,-26,-19,17,60,-7,-4,-10,38,-71,29,-40,-53,45,-41,81,-11,-1,4,-24,3,-1,-33, -59,127,2,20,-79,-119,75,-74,54,22,67,-59,-44,32,-39,109,68,11,-2,127,-63,13,79,127,10,-127,127,5,24,-49,-56,-104,14,-50,-71,-89,-69,-75,29,34,127,60,-33,40,-27,-62,-103,-8, 38,-4,16,-3,-10,-35,22,11,25,25,112,14,28,-2,-26,70,52,-33,-50,24,-17,-3,-48,34,7,-19,-21,-55,8,-3,-16,-2,1,5,-21,44,-32,-41,49,-1,49,4,35,0,-25,-52,16,28, 
};
const TfArray<48, float> quant17_scale = { 48, { 0.0049203378148376942, 0.0035103163681924343, 0.059181772172451019, 0.012916957028210163, 0.009419729933142662, 0.0070947273634374142, 0.0067027416080236435, 0.020004894584417343, 0.0057942704297602177, 0.01642681285738945, 0.0094362059608101845, 0.0063372105360031128, 0.0075838137418031693, 0.0047509702853858471, 0.0093725509941577911, 0.0049762977287173271, 0.0036833586636930704, 0.0030183785129338503, 0.020348101854324341, 0.0023301956243813038, 0.0053275329992175102, 0.019179288297891617, 0.010438820347189903, 0.010414278134703636, 0.013610326685011387, 0.01233191043138504, 0.0092584192752838135, 0.013414060696959496, 0.013944191858172417, 0.0091866143047809601, 0.0061433287337422371, 0.0047507206909358501, 0.0058226347900927067, 0.010651024058461189, 0.0060222269967198372, 0.0063841128721833229, 0.029218615964055061, 0.0077419038861989975, 0.0066756037995219231, 0.018063962459564209, 0.0063293795101344585, 0.0063502644188702106, 0.011055216193199158, 0.0077557037584483624, 0.010266733355820179, 0.0025730426423251629, 0.0064633418805897236, 0.009350193664431572, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 438, 4310, -5357, 3167, 1932, 3982, 1984, 9940, 5860, 4996, -1815, -246, 788, 2710, 2195, -758, -20, 4038, 8089, 483, 2318, 7897, 1949, 4830, 9910, 5759, 1181, 6529, 2201, 4029, -1473, 7403, 1091, 5668, 5907, 4306, 70705, 7901, 3938, 9339, 2156, 657, 3395, 1112, 2758, 1553, 1551, 2992, };
const TfArray<48, float> quant18_scale = { 48, { 0.00041236032848246396, 0.00017932255286723375, 0.00014326763630378991, 0.00020067817240487784, 0.00024644730729050934, 0.00016829882224556059, 0.00025722754071466625, 9.3005080998409539e-05, 0.0001553164329379797, 0.00014639935398008674, 0.0001944155665114522, 0.00021596979058813304, 0.00026767267263494432, 0.00022201618412509561, 0.00023607989714946598, 0.00015125014760997146, 0.00028536902391351759, 0.00017466647841501981, 0.0001130072632804513, 0.00023997454263735563, 0.00021640173508785665, 0.00010516143083805218, 0.00027363328263163567, 0.00014920046669431031, 9.186762326862663e-05, 0.00015980219177436084, 0.00021481199655681849, 0.00013707226025871933, 0.00011826653644675389, 0.00019567653362173587, 0.00034013213007710874, 0.00010482639481779188, 0.00034397860872559249, 0.0001395298313582316, 0.00011279399768682197, 0.00018120788445230573, 2.2273210561252199e-05, 0.00011528689356055111, 0.00015773309860378504, 0.00010582387039903551, 0.00017157870752271265, 0.00034133045119233429, 0.00020331324776634574, 0.00017821849905885756, 0.00022571365116164088, 0.00018497204291634262, 0.00028331039356999099, 0.00012791904737241566, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -81,-127,-30,25,-31,-7,47,-50, 
  /* [1][0][][] */ -8,127,39,-78,2,-89,-65,95, 
  /* [2][0][][] */ -127,-67,39,5,73,7,28,-20, 
  /* [3][0][][] */ 6,-36,-127,-55,29,-52,-32,51, 
  /* [4][0][][] */ -52,-105,91,-22,127,-60,55,6, 
  /* [5][0][][] */ -20,71,60,-92,108,40,-59,127, 
  /* [6][0][][] */ -127,93,51,73,-49,6,37,-126, 
  /* [7][0][][] */ 44,-18,54,27,53,-127,-2,103, 
  /* [8][0][][] */ -1,72,-15,-30,15,99,127,-64, 
  /* [9][0][][] */ 84,127,15,-73,-79,-66,-54,124, 
  /* [10][0][][] */ 35,-7,29,5,-23,31,-127,-76, 
  /* [11][0][][] */ -71,10,-101,-71,127,24,34,51, 
  /* [12][0][][] */ 88,39,-30,-2,127,90,14,3, 
  /* [13][0][][] */ -127,-119,-13,59,-106,44,74,10, 
  /* [14][0][][] */ -6,98,-84,116,-51,127,-20,26, 
  /* [15][0][][] */ -22,-93,-38,-99,127,62,-28,72, 
  /* [16][0][][] */ 70,-81,2,47,40,-19,37,-127, 
  /* [17][0][][] */ -74,-74,-127,101,3,86,77,-101, 
  /* [18][0][][] */ 89,-6,127,15,-40,-122,-79,-42, 
  /* [19][0][][] */ -30,127,36,25,108,-117,-78,-41, 
  /* [20][0][][] */ -75,-17,-127,-45,38,-3,-7,-7, 
  /* [21][0][][] */ -120,-14,49,68,-96,-111,127,-54, 
  /* [22][0][][] */ 53,-12,-127,-74,-34,-6,-10,49, 
  /* [23][0][][] */ -25,30,127,-20,-104,31,-3,-98, 
  /* [24][0][][] */ -90,110,90,121,127,97,6,-40, 
  /* [25][0][][] */ -54,-127,-71,33,-58,40,46,-3, 
  /* [26][0][][] */ 102,113,-127,-52,-124,-21,-58,42, 
  /* [27][0][][] */ 59,58,-67,21,-127,22,-30,-16, 
  /* [28][0][][] */ -32,69,24,-86,86,110,-127,-116, 
  /* [29][0][][] */ 47,-7,-6,-74,-127,7,15,-64, 
  /* [30][0][][] */ -84,1,35,127,48,17,-33,-19, 
  /* [31][0][][] */ 16,-110,-2,-81,-127,55,-57,-111, 
  /* [32][0][][] */ -127,-4,26,-13,6,-29,-2,20, 
  /* [33][0][][] */ 46,-64,-127,-104,0,8,-49,17, 
  /* [34][0][][] */ 57,96,115,1,-127,-76,84,-73, 
  /* [35][0][][] */ 109,28,18,12,-108,-41,-127,-53, 
  /* [36][0][][] */ 127,12,75,-39,6,-22,73,78, 
  /* [37][0][][] */ 124,112,-10,-6,79,87,-127,30, 
  /* [38][0][][] */ -45,95,118,127,-31,74,33,-81, 
  /* [39][0][][] */ 30,52,127,-38,90,-51,-35,13, 
  /* [40][0][][] */ 66,39,33,7,-83,-127,31,-47, 
  /* [41][0][][] */ 29,-57,23,127,-21,75,3,77, 
  /* [42][0][][] */ -20,-109,68,-43,127,-38,98,33, 
  /* [43][0][][] */ -11,-33,-115,-41,125,41,-79,127, 
  /* [44][0][][] */ 105,-18,127,-2,3,30,-53,6, 
  /* [45][0][][] */ -33,20,24,-33,-104,-127,-21,103, 
  /* [46][0][][] */ -60,75,77,30,-3,-19,37,-127, 
  /* [47][0][][] */ 39,-16,12,127,-10,-116,69,59, 
};
const TfArray<48, float> quant19_scale = { 48, { 0.0061409934423863888, 0.0026705251075327396, 0.0021335845813155174, 0.0029885594267398119, 0.0036701669450849295, 0.0025063564535230398, 0.0038307097274810076, 0.0013850595569238067, 0.0023130187764763832, 0.0021802231203764677, 0.0028952949214726686, 0.003216286888346076, 0.003986261785030365, 0.0033063315786421299, 0.0035157725214958191, 0.0022524625528603792, 0.0042498009279370308, 0.0026011855807155371, 0.0016829379601404071, 0.0035737727303057909, 0.0032227195333689451, 0.0015660955104976892, 0.0040750289335846901, 0.0022219379898160696, 0.001368120196275413, 0.0023798220790922642, 0.0031990446150302887, 0.0020413212478160858, 0.0017612606752663851, 0.0029140736442059278, 0.0050653493963181973, 0.0015611060662195086, 0.0051226322539150715, 0.0020779201295226812, 0.0016797620337456465, 0.0026986021548509598, 0.00033169932430610061, 0.0017168869962915778, 0.0023490085732191801, 0.0015759607776999474, 0.0025552015285938978, 0.005083195399492979, 0.0030278018675744534, 0.0026540833059698343, 0.0033613953273743391, 0.0027546591591089964, 0.0042191431857645512, 0.0019050086848437786, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 3589, -2968, 13046, -8170, -12041, -12100, -7940, -1761, };
const TfArray<8, float> quant20_scale = { 8, { 0.00010757078416645527, 0.00016101545770652592, 0.00012194890587124974, 0.0001638660323806107, 0.00021154916612431407, 0.00011894236376974732, 0.0001996666396735236, 0.00022553907183464617, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -17,-28,47,-49,56,89,67,96,109,-47,-17,56,-31,-19,19,-16,48,46,16,-50,-33,19,-85,-39,29,-12,21,-71,-36,26,46,27,28,45,61,16,124,-56,-79,9,-53,-65,-31,-3,-69,-86,-127,60, 
  /* [1][0][][] */ -14,2,-37,51,0,14,-37,-17,-54,25,19,82,-26,5,-27,127,41,61,11,-29,-43,-24,-64,18,11,-11,-16,-82,45,-9,-54,-63,63,-34,-30,-58,34,33,49,-38,4,65,46,-42,-1,-37,-50,-19, 
  /* [2][0][][] */ 8,-71,-25,-3,-29,18,1,13,106,18,-5,-19,-30,-75,38,10,3,-57,-22,-2,-100,46,8,30,5,42,-37,-27,-20,-37,42,-44,-95,26,-51,55,-64,57,-22,-20,127,-18,-1,38,29,42,-58,-35, 
  /* [3][0][][] */ -27,-108,97,60,23,-103,-19,-10,-122,127,63,-54,51,11,-21,23,61,37,-27,44,76,81,32,-58,11,83,66,29,-31,-68,17,16,-21,3,49,7,-15,-85,-39,45,-25,-15,22,-64,-81,19,3,29, 
  /* [4][0][][] */ -9,55,-19,73,35,2,8,0,-52,80,48,73,-1,18,62,12,7,-105,-7,-14,90,-11,-99,63,72,-22,32,27,51,26,-11,-56,-55,127,1,18,59,-24,20,24,-26,45,2,-22,2,-48,-30,18, 
  /* [5][0][][] */ -25,2,-10,-71,-127,28,114,25,16,56,-26,-31,-103,-8,58,-37,-88,38,-56,-84,1,104,-5,33,106,29,-8,13,-25,-21,122,-57,-14,101,75,89,-26,56,85,38,-25,-38,-25,35,-60,50,30,51, 
  /* [6][0][][] */ 1,-22,-11,29,-53,-51,13,1,22,-15,40,4,-49,-23,35,56,5,-58,8,-57,68,-26,0,-31,6,-4,6,37,42,3,11,127,44,-14,-13,24,4,-9,18,15,1,36,-27,-51,-1,-26,-22,37, 
  /* [7][0][][] */ -27,-18,-42,-3,8,-24,3,12,39,7,25,-2,-9,11,3,1,32,-5,3,-3,-61,9,11,-28,-2,-7,-51,-14,-13,-17,19,31,19,-11,28,13,-19,127,-14,-40,-39,-1,-45,-36,24,63,-73,-10, 
};
const TfArray<8, float> quant21_scale = { 8, { 0.0045717582106590271, 0.0068431571125984192, 0.0051828282885253429, 0.0069643063470721245, 0.0089908391237258911, 0.005055050365626812, 0.0084858322516083717, 0.0095854103565216064, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { -428, 27382, 26787, 1075, 3957, -12982, 20224, 18289, -11365, 5802, -417, 14452, 21800, -14157, -11445, 2953, 2789, 26744, -238, 2216, 54385, 8683, -7418, -6036, 14060, 12468, -1158, -1370, -3214, 258, 29482, 2986, -1260, 8631, 11668, 15472, 2983, 43159, -6854, -276, 25705, 1124, -3489, 13090, 646, 69, -9641, 13908, };
const TfArray<48, float> quant22_scale = { 48, { 0.0002373889583395794, 8.6410473159048706e-05, 0.00011201828601770103, 7.5829295383300632e-05, 4.1795465222094208e-05, 0.0001219247787958011, 0.0001016470996546559, 9.4525552412960678e-05, 0.00037153478479012847, 5.0583210395416245e-05, 7.6952150266151875e-05, 7.6034193625673652e-05, 8.2708356785587966e-05, 0.00023614944075234234, 5.9606896684272215e-05, 6.0657101130345836e-05, 5.2730072638951242e-05, 0.00019634752243291587, 0.00099645007867366076, 5.4453386837849393e-05, 4.1862294892780483e-05, 7.0787806180305779e-05, 6.1706268752459437e-05, 0.00017608935013413429, 7.8649718489032239e-05, 8.1598089309409261e-05, 0.00029222216107882559, 0.00026016234187409282, 9.6970834420062602e-05, 0.00031530245905742049, 0.00013247563038021326, 7.5044423283543438e-05, 5.8591740526026115e-05, 9.0776426077354699e-05, 7.6527030614670366e-05, 0.00011579237616388127, 6.381963612511754e-05, 8.3372389781288803e-05, 0.00010451750131323934, 0.00011313029972370714, 0.00015160588372964412, 0.00022744724992662668, 8.8993765530176461e-05, 6.7771739850286394e-05, 0.00014056413783691823, 0.00019322556909173727, 0.00021785918215755373, 0.0001266764011234045, } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 56,-72,-32,46,96,41,-64,-97,20,60,111,-68,-52,66,85,48,62,-74,62,79,-87,-93,45,88,-41,-28,66,70,91,91,-52,64,46,-73,-102,-79,65,-58,82,14,-88,64,49,-107,68,115,80,-59, 91,-87,-66,74,119,49,-71,-117,34,77,122,-100,-77,82,101,78,67,-98,58,97,-81,-116,71,100,-68,-67,95,102,120,127,-69,81,66,-86,-127,-81,84,-71,79,36,-116,78,44,-111,106,127,86,-87, 50,-44,-44,26,42,2,-28,-61,31,28,33,-33,-74,37,37,28,17,-22,25,20,-12,-83,31,46,-29,-15,41,37,46,49,-25,11,30,-71,-66,-48,29,-25,20,25,-34,23,10,-39,42,30,27,-57, 
  /* [0][1][][] */ 47,-95,-65,83,110,85,-113,-111,92,97,110,-85,-102,98,127,79,107,-96,46,112,-109,-127,81,109,-102,-79,113,93,107,84,-83,102,91,-118,-90,-127,87,-98,121,82,-102,89,97,-122,87,112,57,-89, 53,-127,-127,127,127,127,-127,-127,127,127,127,-127,-127,127,116,127,127,-127,49,127,-127,-120,127,127,-127,-127,127,127,127,100,-127,127,127,-127,-102,-110,127,-127,127,127,-127,127,127,-127,127,119,64,-127, -9,-64,-85,67,42,33,-64,-58,62,41,37,-57,-97,42,49,61,31,-33,22,36,-35,-91,59,69,-72,-16,27,54,64,6,-47,27,55,-120,-65,-50,47,-40,37,53,-18,60,36,-50,48,-3,30,-82, 
  /* [0][2][][] */ -40,-48,-48,53,32,45,-47,-24,-77,45,28,-57,-72,30,61,46,66,-20,-82,57,-39,-42,49,53,-63,-61,56,47,33,6,-46,36,47,-65,-23,-45,25,-43,49,71,-31,56,68,-61,42,7,-101,-28, -127,-73,-95,77,42,68,-64,-13,-56,56,47,-65,-108,40,54,69,75,-28,-127,71,-56,-77,73,54,-83,-48,48,52,43,-2,-68,39,66,-103,-28,-55,37,-58,50,96,-22,68,101,-78,58,-22,-127,-69, -68,-16,-63,46,14,21,2,-1,-70,23,31,-20,-57,17,33,41,22,-6,-64,31,-27,-7,22,35,-40,4,10,29,19,-9,-29,10,31,-50,-6,-19,13,-11,4,38,3,19,33,-13,17,-21,-49,-40, 
};
const TfArray<48, float> quant23_scale = { 48, { 0.010089030489325523, 0.0036724449601024389, 0.0047607771120965481, 0.0032227449119091034, 0.0017763072391971946, 0.0051818029023706913, 0.004320001695305109, 0.0040173358283936977, 0.015790227800607681, 0.0021497863344848156, 0.0032704663462936878, 0.0032314532436430454, 0.0035151049960404634, 0.010036351159214973, 0.0025332930963486433, 0.0025779267307370901, 0.002241028007119894, 0.0083447694778442383, 0.042349126189947128, 0.0023142688442021608, 0.0017791474238038063, 0.0030084818135946989, 0.0026225163601338863, 0.0074837971478700638, 0.0033426131121814251, 0.0034679188393056393, 0.012419441714882851, 0.011056899093091488, 0.0041212602518498898, 0.01340035442262888, 0.0056302142329514027, 0.0031893879640847445, 0.0024901488795876503, 0.0038579981774091721, 0.0032523986883461475, 0.0049211760051548481, 0.002712334506213665, 0.0035433266311883926, 0.0044419937767088413, 0.0048080375418066978, 0.0064432499930262566, 0.0096665080636739731, 0.0037822350859642029, 0.0028802989982068539, 0.0059739756397902966, 0.0082120867446064949, 0.0092590153217315674, 0.0053837466984987259, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { -1946, 5305, 4395, -893, 21, 10853, 3726, 1647, 10562, 1330, -2512, 1706, 3689, 1648, -246, 745, -1831, 7347, -3360, -843, 837, 1070, 474, -498, 72, 2622, -1919, -1499, -643, -2851, 9403, 3103, 554, 910, 467, 1480, 1455, 8431, 1594, 564, 7075, -2014, 767, 1473, -1514, -2428, 10635, 2802, };
const TfArray<48, float> quant24_scale = { 48, { 0.00027684221277013421, 0.00015621617785654962, 0.00018049347272608429, 0.00028395210392773151, 0.00053166720317676663, 8.4350736869964749e-05, 0.00023323288769461215, 0.00026381952920928597, 9.4480710686184466e-05, 0.0004032603173982352, 0.00019380322191864252, 0.00030289540882222354, 0.00018014160741586238, 0.00027990734088234603, 0.0003848915221169591, 0.0002173941902583465, 0.00022864800121169537, 0.00013585205306299031, 0.00014738448953721672, 0.00035385601222515106, 0.0004308788338676095, 0.00026369793340563774, 0.00032625315361656249, 0.00021513010142371058, 0.00040379705023951828, 0.00021039866260252893, 0.00023661131854169071, 0.00019750803767237812, 0.00032998944516293705, 0.0001621154515305534, 0.00011560779967112467, 0.00022042187629267573, 0.00040036239079199731, 0.00037638327921740711, 0.00024575667339377105, 0.00025385586195625365, 0.00019914038421120495, 0.00010822311014635488, 0.0003067213692702353, 0.00026477489154785872, 0.00014059088425710797, 0.00013713027874473482, 0.00031234772177413106, 0.00027833378408104181, 0.00034700526157394052, 0.00019587084534578025, 9.9632467026822269e-05, 0.00019057406461797655, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 41,26,-53,10,-37,50,-127,23, 
  /* [1][0][][] */ 6,-65,-119,0,-12,-19,127,-109, 
  /* [2][0][][] */ -127,-52,-71,-47,-34,50,-120,-6, 
  /* [3][0][][] */ -57,-39,20,-11,-22,-127,-111,-20, 
  /* [4][0][][] */ -41,-127,-41,21,59,19,-37,-46, 
  /* [5][0][][] */ 68,-33,85,50,-127,62,-76,-103, 
  /* [6][0][][] */ 40,-127,-63,-30,-12,63,-44,-85, 
  /* [7][0][][] */ -26,-81,-60,-60,76,-127,3,18, 
  /* [8][0][][] */ 38,68,47,66,36,-48,-3,127, 
  /* [9][0][][] */ -24,-57,-50,10,47,-16,127,-14, 
  /* [10][0][][] */ -27,16,-127,27,25,19,108,-118, 
  /* [11][0][][] */ 4,-33,-36,3,-127,23,4,53, 
  /* [12][0][][] */ 94,60,-19,45,-88,127,91,-14, 
  /* [13][0][][] */ -46,-3,20,-22,44,-127,-5,71, 
  /* [14][0][][] */ -109,-48,7,34,11,72,-127,-126, 
  /* [15][0][][] */ 65,80,52,8,-127,38,111,-52, 
  /* [16][0][][] */ 1,-60,9,81,-11,-69,11,-127, 
  /* [17][0][][] */ -84,127,24,-13,-63,-47,-86,-82, 
  /* [18][0][][] */ 91,127,-82,-103,92,96,-86,-79, 
  /* [19][0][][] */ -29,82,-15,12,-127,9,-67,-102, 
  /* [20][0][][] */ -127,-6,8,13,21,19,105,52, 
  /* [21][0][][] */ -33,-1,52,12,-88,-112,-127,22, 
  /* [22][0][][] */ -4,-37,-44,-8,-127,2,6,60, 
  /* [23][0][][] */ 60,5,-18,-11,127,64,-83,78, 
  /* [24][0][][] */ 127,13,-50,28,-88,3,13,-8, 
  /* [25][0][][] */ 28,-58,57,112,-46,-127,33,97, 
  /* [26][0][][] */ 24,127,10,61,82,-22,24,-19, 
  /* [27][0][][] */ -126,119,62,-17,127,-71,1,95, 
  /* [28][0][][] */ -73,-75,-60,-35,82,-127,19,-16, 
  /* [29][0][][] */ -57,-22,44,45,127,-94,-87,72, 
  /* [30][0][][] */ 127,49,-119,-101,-73,-92,-78,-68, 
  /* [31][0][][] */ 28,0,42,62,-127,9,32,6, 
  /* [32][0][][] */ 127,19,52,38,-35,-56,83,63, 
  /* [33][0][][] */ 127,38,-44,5,-122,-70,29,50, 
  /* [34][0][][] */ 43,-16,-20,24,-45,127,21,-80, 
  /* [35][0][][] */ 127,39,-19,-31,41,-102,33,118, 
  /* [36][0][][] */ -33,-43,69,-97,-30,-16,79,-127, 
  /* [37][0][][] */ 79,-65,59,46,115,-7,34,-127, 
  /* [38][0][][] */ 66,127,8,-30,-23,19,25,77, 
  /* [39][0][][] */ 24,5,-77,66,-23,-56,-79,127, 
  /* [40][0][][] */ -14,-33,-1,-32,24,-127,23,40, 
  /* [41][0][][] */ -31,47,-127,-65,92,114,65,-109, 
  /* [42][0][][] */ 33,-44,-42,16,80,127,29,57, 
  /* [43][0][][] */ -1,44,-24,24,-127,-77,52,-54, 
  /* [44][0][][] */ -127,-51,-14,-31,53,54,-107,-74, 
  /* [45][0][][] */ -62,64,-60,21,37,-1,-69,127, 
  /* [46][0][][] */ -23,49,127,3,-54,-57,-55,36, 
  /* [47][0][][] */ -127,-110,-48,-52,104,110,-29,89, 
};
const TfArray<48, float> quant25_scale = { 48, { 0.0028096125461161137, 0.0015854047378525138, 0.0018317897338420153, 0.0028817695565521717, 0.0053957770578563213, 0.00085605768254026771, 0.0023670308291912079, 0.0026774483267217875, 0.00095886457711458206, 0.0040926029905676842, 0.001966867595911026, 0.003074021078646183, 0.0018282188102602959, 0.0028407198842614889, 0.0039061820134520531, 0.0022062873467803001, 0.0023204998578876257, 0.001378733548335731, 0.0014957737876102328, 0.0035912094172090292, 0.004372897557914257, 0.0026762140914797783, 0.0033110736403614283, 0.0021833095233887434, 0.0040980502963066101, 0.0021352912299335003, 0.002401317935436964, 0.0020044669508934021, 0.0033489924389868975, 0.0016452751588076353, 0.0011732788989320397, 0.0022370147053152323, 0.004063192754983902, 0.003819833742454648, 0.0024941321462392807, 0.0025763290468603373, 0.0020210333168506622, 0.0010983332758769393, 0.0031128497794270515, 0.0026871438603848219, 0.0014268269296735525, 0.0013917060568928719, 0.0031699505634605885, 0.0028247502632439137, 0.0035216824617236853, 0.001987851457670331, 0.0010111486772075295, 0.0019340956350788474, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 11870, 12830, 5054, 4957, 1020, -13245, 4825, -6358, };
const TfArray<8, float> quant26_scale = { 8, { 0.00013377245340961963, 9.8999153124168515e-05, 0.00014979904517531395, 0.00020675839914474636, 0.00012711776071228087, 0.00013142726675141603, 7.1045607910491526e-05, 0.00012404780136421323, } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 36,-49,101,68,28,-42,22,9,-4,56,-33,12,-48,-86,38,3,-110,63,-36,66,-46,70,2,-28,-1,-48,65,-29,-25,22,-34,105,-62,-12,-34,-86,-64,-47,-38,-15,-15,58,-127,9,55,24,25,51, 
  /* [1][0][][] */ -54,-31,57,-9,-30,31,-36,-33,46,-10,-2,-32,-18,13,1,22,0,21,14,-11,-56,-31,-72,-23,23,-35,-32,-36,24,-70,-9,-127,-6,-58,-67,-68,-41,-86,-25,21,41,-17,78,-103,-52,-14,-24,-4, 
  /* [2][0][][] */ -58,92,-10,34,13,10,19,-41,77,-43,72,85,96,15,34,-54,97,-1,6,29,-13,17,17,127,-115,-45,6,-22,-1,86,-22,-85,-23,-1,7,-78,-24,5,-38,-16,89,-80,19,-3,26,-120,-2,-13, 
  /* [3][0][][] */ 63,-19,-59,34,86,-83,3,-115,-31,-7,-56,-86,-19,127,-11,17,-42,-14,-67,-44,30,83,-12,-56,113,41,53,-66,30,-96,50,-63,53,65,108,-77,-48,20,-30,43,22,85,-75,31,0,22,8,38, 
  /* [4][0][][] */ -52,29,-47,71,95,-28,30,-48,-40,-8,-63,34,-49,-15,3,-64,13,63,-32,-42,-44,36,-71,-67,19,-13,23,-41,32,-39,-33,61,-8,77,-71,-78,-65,-67,-41,0,67,-54,127,21,-2,91,-55,-56, 
  /* [5][0][][] */ 52,7,85,-7,-5,20,57,35,127,0,68,-2,77,53,27,-63,-16,32,35,-45,-54,-72,13,45,23,-11,26,47,-36,-30,19,-20,-22,53,-18,62,52,2,-28,-44,-10,69,34,40,-17,-7,71,7, 
  /* [6][0][][] */ -6,-69,-17,16,39,-6,1,16,-49,-17,107,58,102,70,-35,48,119,-127,-21,3,-13,-39,-103,36,-80,68,-33,-1,-20,-52,70,-53,95,17,-71,-25,-42,9,60,12,77,-70,-3,-80,-107,46,-44,23, 
  /* [7][0][][] */ -14,-22,-60,-36,15,102,-5,-6,-10,-54,-127,-101,42,49,-58,-47,-38,23,100,19,-15,-77,56,-16,110,-30,-78,86,-42,-10,-28,-83,-49,65,46,111,85,-59,-24,-43,-25,-8,34,-16,-6,-23,2,-57, 
};
const TfArray<8, float> quant27_scale = { 8, { 0.0056853294372558594, 0.0042074639350175858, 0.0063664591871201992, 0.008787231519818306, 0.0054025044664740562, 0.0055856588296592236, 0.003019438125193119, 0.0052720317617058754, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -822, 1069, 1020, 319, 821, 8711, -145, -3772, -4551, -913, -6581, 6, -3853, -6899, -305, 313, -7160, 15400, -3418, 520, -831, -222, -1146, 89, 20155, 226, -455, -352, -48, 1062, 101, -7852, 199, 12813, 465, 6637, -327, -2081, -737, -542, -3426, -796, 3059, 5917, 976, 7661, 639, -1508, };
const TfArray<48, float> quant28_scale = { 48, { 0.00035864702658727765, 0.00011970475316047668, 0.00061562331393361092, 0.00013900778139941394, 0.00011405692202970386, 0.00027849155594594777, 0.00032600687700323761, 0.0001947525015566498, 0.00046542135532945395, 0.00014007842401042581, 0.00046327500604093075, 0.00022100773639976978, 0.00011695947614498436, 0.00016457327001262456, 0.00016173018957488239, 0.00066496815998107195, 0.00037484252243302763, 7.6109397923573852e-05, 0.00010238710819976404, 0.00047734213876537979, 0.00026949201128445566, 0.00035541795659810305, 0.00018122755864169449, 0.00072047888534143567, 0.000257730862358585, 0.00037852671812288463, 0.00021944272157270461, 0.00012803568097297102, 0.00020634177781175822, 0.00015910192450974137, 0.00047389362589456141, 0.00050192337948828936, 0.00054495170479640365, 0.00014697646838612854, 0.00059008592506870627, 0.00019702389545273036, 0.00017883216787595302, 7.1127309638541192e-05, 0.00049765070434659719, 0.00090532604372128844, 0.00026673453976400197, 0.00095103716012090445, 0.00068854645360261202, 0.00017789623234421015, 0.00026465693372301757, 0.00013429587124846876, 0.00022391453967429698, 0.0004453777801245451, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -6,-38,39,-30,127,-4,-11,-12,-33,47,-9,8,70,16,127,-41,9,-21,-27,-17,-28,-19,-65,26,-127,45,29,-50,-11,20,-16,-2,-32,24,15,3,85,58,34,-5,67,15,-13,-6,-102,-9,-45,-36, 4,-95,-74,-30,-51,-3,38,23,15,1,65,127,-7,56,-75,127,-2,-75,32,-52,-72,-127,-82,76,-126,-84,20,116,17,36,127,6,-127,-113,-52,38,127,-84,124,13,60,-11,-22,-13,-57,-14,67,2, 10,-14,-13,127,54,6,-74,-1,-27,-41,-24,-17,56,1,-68,-49,24,19,-14,-11,1,0,-29,16,-49,-62,-29,35,1,31,-91,-10,11,65,15,21,6,84,-127,2,31,-5,-7,26,-127,0,-62,44, 
  /* [0][1][][] */ -112,-61,127,-7,-45,-36,77,19,19,99,10,17,53,27,110,29,27,-127,110,40,79,-7,53,-38,-13,-23,38,-57,23,52,39,58,33,-103,1,127,11,40,-41,-116,27,92,-19,-85,26,-82,-64,21, 127,-63,-75,-72,6,-127,127,127,127,19,127,-41,-127,25,-38,-45,127,-109,127,127,127,85,127,-127,1,-24,106,-24,127,127,-126,127,27,-127,127,-100,-65,127,-98,127,-127,-127,127,-127,96,-127,127,-119, -12,-106,13,74,-24,-12,-43,12,-13,-127,-35,51,85,15,-56,43,23,0,-13,15,1,-23,43,-23,0,9,-127,79,-67,9,80,18,-15,-108,-19,-40,62,21,127,12,29,54,-42,6,54,-26,-61,127, 
  /* [0][2][][] */ -5,123,26,-32,79,14,-41,-14,-27,20,-7,1,55,18,89,6,-16,-1,1,-46,-17,11,0,12,-24,-19,29,-3,-50,-113,-10,-4,-5,54,-20,35,-53,47,15,108,13,20,-1,5,17,3,-19,-38, 3,98,-49,17,34,-32,-1,33,33,16,23,-34,38,127,-81,-80,0,-27,103,-79,-46,79,-2,49,71,127,2,127,-66,-117,-20,-3,88,-110,-87,2,-64,-39,-27,-127,50,-20,-54,75,45,24,14,9, 15,127,-15,33,33,8,-59,-4,-20,-16,-6,-5,58,2,-71,-5,-8,6,-46,-26,-5,6,-5,-1,-46,31,-43,16,39,-84,14,-1,4,55,0,-16,-40,66,13,2,-25,-4,3,-16,11,8,-8,32, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.015242498368024826, 0.0050874520093202591, 0.026163991540670395, 0.0059078307822346687, 0.0048474189825356007, 0.01183589082211256, 0.013855292461812496, 0.0082769813016057014, 0.019780406728386879, 0.0059533328749239445, 0.019689187407493591, 0.009392828680574894, 0.0049707777798175812, 0.0069943638518452644, 0.0068735331296920776, 0.028261145576834679, 0.015930807217955589, 0.0032346493098884821, 0.0043514519929885864, 0.020287040621042252, 0.011453409679234028, 0.015105262398719788, 0.0077021713368594646, 0.030620351433753967, 0.010953561402857304, 0.016087384894490242, 0.0093263154849410057, 0.0054415161721408367, 0.0087695252150297165, 0.0067618316970765591, 0.020140478387475014, 0.021331742405891418, 0.023160446435213089, 0.0062464997172355652, 0.025078650563955307, 0.0083735156804323196, 0.0076003670692443848, 0.0030229105614125729, 0.021150154992938042, 0.038476355373859406, 0.011336217634379864, 0.0404190793633461, 0.029263222590088844, 0.0075605898164212704, 0.011247919872403145, 0.0057075745426118374, 0.0095163676887750626, 0.018928555771708488, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 4634, 1738, 22622, -2100, -1177, 4214, -623, 716, 2198, -5, 4866, 338, 1917, 2857, 2038, 3192, 2112, 2001, -577, 3870, 1110, 192, 1113, 9820, 23776, 3530, 2943, -952, -127, 5225, 5645, 7982, 9317, 3992, 5792, -980, 399, 1910, 6383, 5191, 595, 11708, 10568, 2951, 5704, 1557, 3282, 550, };
const TfArray<48, float> quant30_scale = { 48, { 0.00018742925021797419, 0.00031072559067979455, 5.6911740102805197e-05, 0.00025211973115801811, 0.00035832801950164139, 0.00024305007536895573, 0.00030060147400945425, 0.0007508427370339632, 0.00028815458063036203, 0.00036593704135157168, 0.00017457667854614556, 0.00043958015157841146, 0.00026680386508814991, 0.00026715779677033424, 0.00027326663257554173, 0.00024945716722868383, 0.00021892711811233312, 0.00025597406784072518, 0.00046633760211989284, 0.00022765868925489485, 0.00034519261680543423, 0.00040570669807493687, 0.00028024628409184515, 0.00010030827979790047, 6.6065971623174846e-05, 0.00024631270207464695, 0.00027367848088033497, 0.00036500600981526077, 0.0006649052957072854, 0.00016712621436454356, 0.00016110544675029814, 0.00012386433081701398, 0.00010619292879709974, 0.00021691129950340837, 0.00015552005788777024, 0.00024579919409006834, 0.00037096376763656735, 0.00021246945834718645, 0.00014189114153850824, 0.00017554400255903602, 0.00027092880918644369, 8.7109779997263104e-05, 0.00010685191227821633, 0.00027563024195842445, 0.00016681371198501438, 0.00041229370981454849, 0.00023548140597995371, 0.00034923537168651819, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -16,27,17,-127,-97,6,31,120, 
  /* [1][0][][] */ 99,8,-17,-5,-85,53,127,23, 
  /* [2][0][][] */ -6,116,-43,-25,-37,91,-49,-127, 
  /* [3][0][][] */ 64,-70,-88,115,-127,-38,-2,-29, 
  /* [4][0][][] */ 39,-61,48,-15,-127,-3,51,27, 
  /* [5][0][][] */ -14,48,-9,-88,-127,-4,-28,8, 
  /* [6][0][][] */ 46,-17,37,30,127,-31,-9,-118, 
  /* [7][0][][] */ 13,32,22,127,24,-9,-2,22, 
  /* [8][0][][] */ 24,25,13,-47,36,127,11,-33, 
  /* [9][0][][] */ 110,32,-4,13,-57,-48,127,78, 
  /* [10][0][][] */ 4,67,-72,-30,1,127,85,-59, 
  /* [11][0][][] */ -15,-33,-127,96,-63,29,-11,71, 
  /* [12][0][][] */ -98,-85,58,50,33,-127,-46,10, 
  /* [13][0][][] */ 40,32,34,53,-59,127,13,-37, 
  /* [14][0][][] */ 7,-95,5,-4,-66,-72,-127,103, 
  /* [15][0][][] */ -84,38,-5,2,98,-1,-127,-49, 
  /* [16][0][][] */ 97,77,-101,-127,54,127,115,36, 
  /* [17][0][][] */ -111,123,-127,45,-15,-26,25,-111, 
  /* [18][0][][] */ 33,-5,-95,127,-9,-36,-42,-57, 
  /* [19][0][][] */ 120,15,14,32,-43,9,127,51, 
  /* [20][0][][] */ 42,-75,-88,127,49,-24,-26,-58, 
  /* [21][0][][] */ 24,52,127,-105,41,-28,25,-100, 
  /* [22][0][][] */ -88,-38,-127,60,-31,33,9,122, 
  /* [23][0][][] */ 83,26,31,43,-127,115,67,-42, 
  /* [24][0][][] */ -9,-1,-127,84,-42,28,48,64, 
  /* [25][0][][] */ 48,-37,-68,127,48,-5,-36,-13, 
  /* [26][0][][] */ -74,25,127,-98,-16,33,65,-11, 
  /* [27][0][][] */ -67,76,127,3,24,-12,71,18, 
  /* [28][0][][] */ -52,-101,39,-127,-22,9,-3,-28, 
  /* [29][0][][] */ -71,-79,-20,80,-8,-127,-11,51, 
  /* [30][0][][] */ -127,47,118,-27,42,37,70,26, 
  /* [31][0][][] */ -58,52,83,-127,-43,16,34,61, 
  /* [32][0][][] */ -73,82,97,-102,7,-4,10,127, 
  /* [33][0][][] */ 5,106,-51,48,25,18,-127,-25, 
  /* [34][0][][] */ 86,11,127,-100,-84,-106,39,-38, 
  /* [35][0][][] */ 87,-4,33,107,77,-71,28,-127, 
  /* [36][0][][] */ 21,64,127,-105,24,-28,37,-110, 
  /* [37][0][][] */ -54,-48,105,69,-3,-127,99,-12, 
  /* [38][0][][] */ 74,3,71,41,-30,-48,127,17, 
  /* [39][0][][] */ 53,-76,-29,9,-127,9,73,60, 
  /* [40][0][][] */ -35,33,-127,108,-47,51,-83,114, 
  /* [41][0][][] */ -114,-16,-54,-4,127,17,-93,15, 
  /* [42][0][][] */ -88,65,-26,-33,127,31,-116,-48, 
  /* [43][0][][] */ 127,113,-35,125,-1,-101,57,75, 
  /* [44][0][][] */ -3,16,87,3,37,-127,22,-32, 
  /* [45][0][][] */ -9,-80,127,77,-30,-20,-122,18, 
  /* [46][0][][] */ 49,-124,-127,55,-86,30,-8,-18, 
  /* [47][0][][] */ -103,-29,45,-6,75,32,-127,-35, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0026577417738735676, 0.0044060805812478065, 0.00080700695980340242, 0.0035750512033700943, 0.0050810817629098892, 0.0034464434720575809, 0.004262520931661129, 0.01064692996442318, 0.0040860241279006004, 0.0051889773458242416, 0.0024754926562309265, 0.0062332348898053169, 0.0037832716479897499, 0.0037882903125137091, 0.0038749133236706257, 0.0035372958518564701, 0.003104380564764142, 0.0036297054030001163, 0.0066126547753810883, 0.0032281940802931786, 0.0048948219045996666, 0.005752909928560257, 0.0039738849736750126, 0.0014223686885088682, 0.00093681365251541138, 0.0034927073866128922, 0.0038807534147053957, 0.0051757753826677799, 0.0094283390790224075, 0.0023698452860116959, 0.0022844709455966949, 0.0017563928849995136, 0.0015058128628879786, 0.0030757964123040438, 0.00220527034252882, 0.003485425841063261, 0.0052602561190724373, 0.0030128112994134426, 0.0020120125263929367, 0.0024892091751098633, 0.003841763362288475, 0.0012352142948657274, 0.001515157287940383, 0.0039084292948246002, 0.0023654140532016754, 0.0058463136665523052, 0.0033391199540346861, 0.0049521480686962605, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -11441, 1334, -15485, 1015, 3293, -1894, 8892, 1974, };
const TfArray<8, float> quant32_scale = { 8, { 0.00019770226208493114, 0.00013389330706559122, 0.00011652183457044885, 7.1236143412534148e-05, 0.00018991240358445793, 0.00014016932982485741, 0.00016389324446208775, 0.00013435885193757713, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 47,103,-41,72,-4,-4,-20,8,61,-63,4,-28,10,10,-32,-50,3,-21,30,15,-55,-31,-35,8,15,13,25,-4,14,9,-23,27,-64,9,111,-127,-24,21,-13,112,-29,16,11,-3,-14,37,27,-44, 
  /* [1][0][][] */ -1,-49,36,51,-13,-14,-20,-21,50,-42,94,46,21,12,-46,-85,127,44,16,12,-73,34,40,-16,-49,-98,-32,-52,-12,-60,45,-42,-12,-21,-33,12,8,-18,87,-54,-13,34,-63,40,79,64,15,51, 
  /* [2][0][][] */ 78,-26,-15,-17,109,112,64,76,-32,-6,1,-33,-6,47,61,32,-24,-34,58,-68,-42,-53,-47,57,-96,-99,118,18,60,-69,-64,17,-127,87,106,17,-11,-3,-8,19,26,68,15,-64,-21,16,58,-48, 
  /* [3][0][][] */ 80,-35,14,-11,118,127,29,49,-38,-29,28,54,-122,44,70,21,4,10,74,-111,-90,19,35,88,9,-36,54,27,47,-57,-2,-13,-120,60,-65,-120,21,-41,65,-52,52,-91,-110,-29,-63,39,-16,63, 
  /* [4][0][][] */ 36,41,-27,-39,-12,-12,-18,-19,3,-4,-7,-13,-32,-21,62,53,-39,-16,-35,43,29,-14,-14,2,-51,-41,-6,52,-14,10,-21,27,-31,-16,26,-127,-10,27,10,55,7,-12,-10,-25,43,1,88,-21, 
  /* [5][0][][] */ 69,60,-92,49,5,8,-9,29,-87,-64,-60,-22,33,19,42,26,40,-65,46,127,-73,-46,-58,51,32,-23,-34,69,35,30,-57,3,-1,0,-57,0,-8,16,-26,71,17,76,-5,-41,123,30,16,-59, 
  /* [6][0][][] */ -29,-74,19,-45,-41,-37,-81,-75,-33,-62,-114,44,-53,-50,97,89,-127,8,24,-21,19,58,69,13,-10,-9,-69,86,-81,-36,45,77,17,-56,90,39,27,45,-9,-87,-14,-58,-31,17,-42,-17,-12,65, 
  /* [7][0][][] */ 73,17,-19,43,12,13,11,3,78,-9,-11,-19,56,8,-10,-19,-50,-9,-30,0,3,-21,-24,-27,66,-127,13,-3,-2,93,-19,17,-76,20,-58,-45,-17,24,27,25,24,68,-35,-18,-42,28,43,-26, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.0084023457020521164, 0.0056904652155935764, 0.0049521778710186481, 0.0030275359749794006, 0.0080712772905826569, 0.0059571964666247368, 0.0069654625840485096, 0.0057102511636912823, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 2246, 7035, 1059, -3149, -460, -362, 4888, 7785, 3908, -4218, 509, -44, 5316, 3538, 19649, 13987, -2588, -1087, 5785, 1454, 16480, 213, 74, -59, 7032, 1744, 7517, 19215, 7115, 10417, -373, 2425, 1573, -4824, 1357, 2777, -164, 579, 1152, 2818, 4122, 2884, -5867, 386, -729, 305, 8077, -747, };
const TfArray<48, float> quant34_scale = { 48, { 9.7930162155535072e-05, 0.00013491771824192256, 0.00066377146868035197, 0.0001081883383449167, 0.00063853699248284101, 0.00083938718307763338, 0.00017323906649835408, 0.00020484966807998717, 5.8535795687930658e-05, 0.00030227351817302406, 0.00058119266759604216, 0.00034957131720148027, 0.0002290222910232842, 0.00015604156942572445, 6.1508282669819891e-05, 6.193171429913491e-05, 0.00017380127974320203, 0.00073164963396266103, 5.8605259255273268e-05, 8.9865199697669595e-05, 6.706095882691443e-05, 0.00088862574193626642, 0.0012987934751436114, 0.00032273505348712206, 4.5831402530893683e-05, 0.00021216142340563238, 8.7542211986146867e-05, 0.00015049580542836338, 0.00018088358046952635, 0.00013897285680286586, 0.00057656719582155347, 0.00026590956258587539, 0.00010112997551914304, 0.00031196643249131739, 6.4448482589796185e-05, 7.6085474574938416e-05, 0.00043668042053468525, 0.00040168571285903454, 9.9341377790551633e-05, 0.00019073550356552005, 9.0252353402320296e-05, 0.00022815007832832634, 0.0001340516610071063, 0.00045382266398519278, 9.4305702077690512e-05, 0.00029660449945367873, 7.7090473496355116e-05, 0.0008443680708296597, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -21,-84,-107,76,-85,5,-85,-78,51,78,110,-38,1,8,-77,-59,103,-86,30,-47,-18,-109,-39,-79,86,97,0,-119,1,-47,59,85,50,70,69,21,90,88,24,12,-124,-13,29,45,-41,40,-41,-94, 89,-10,33,77,-127,45,-58,8,93,113,110,69,-11,-71,-127,-104,121,-38,103,-83,-107,127,127,31,127,97,42,-119,-84,-50,-99,113,99,127,100,103,-20,89,60,-69,-91,-84,20,-54,-57,105,-52,108, 108,-2,61,59,-77,14,-33,-10,19,75,3,-28,-79,-1,-40,-50,36,84,51,-17,-62,-28,-86,64,45,28,23,-48,-5,-43,26,46,49,95,13,66,-3,29,42,-9,-56,-4,10,13,-20,48,-18,-1, 
  /* [0][1][][] */ 41,-127,123,87,94,-71,-127,-127,113,84,100,-48,6,-2,-104,-89,100,127,45,-103,-41,111,32,-127,103,114,111,-121,-8,-117,-69,98,108,4,102,53,35,124,54,2,-10,-24,93,99,-110,86,-111,116, 127,-11,5,127,127,-127,-98,3,127,127,127,64,-31,-127,-112,-127,127,61,127,-127,-127,-125,-108,43,108,127,127,-127,-127,-127,127,127,127,9,127,127,-2,127,127,-127,9,-127,126,-81,-127,127,-121,-127, 105,-6,-127,67,92,-58,-44,-11,23,74,9,-17,-127,-2,-32,-31,44,-99,70,-35,-74,7,78,69,55,48,4,-58,-16,-77,-34,37,46,1,25,74,1,25,67,-5,-22,-7,46,-8,-71,40,-49,15, 
  /* [0][2][][] */ 61,-74,0,24,1,68,-77,-76,33,19,13,59,12,8,-42,-28,21,-41,17,-55,-16,0,10,-81,27,33,65,-15,5,-107,14,17,64,-75,75,17,-127,31,5,0,27,-7,94,-127,-72,35,-81,-9, 50,5,0,56,11,95,-36,-2,25,54,17,-127,-12,-83,-40,-40,38,-13,46,-82,-42,-12,-29,27,25,52,67,-45,-83,-111,-25,18,63,-82,67,28,20,50,57,-49,127,-62,127,104,-106,54,-127,20, -26,-9,-8,30,-17,42,-23,-4,7,17,-55,46,-64,-2,-9,1,3,25,27,-2,-34,22,11,30,30,33,18,-8,-7,-46,14,-11,1,-41,20,19,7,-11,36,9,62,2,30,-11,-26,18,-31,-2, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0041620316915214062, 0.0057340031489729881, 0.028210286051034927, 0.0045980042777955532, 0.027137821540236473, 0.035673953592777252, 0.0073626604862511158, 0.0087061105296015739, 0.002487771213054657, 0.012846624478697777, 0.024700688198208809, 0.014856780879199505, 0.0097334468737244606, 0.0066317664459347725, 0.0026141020935028791, 0.0026320978067815304, 0.0073865540325641632, 0.031095109879970551, 0.002490723505616188, 0.0038192709907889366, 0.0028500906191766262, 0.037766594439744949, 0.055198721587657928, 0.013716239482164383, 0.0019478345056995749, 0.0090168602764606476, 0.0037205440457910299, 0.006396071519702673, 0.0076875519007444382, 0.0059063462540507317, 0.024504104629158974, 0.011301156133413315, 0.0042980238795280457, 0.013258572667837143, 0.0027390604373067617, 0.0032336325384676456, 0.018558917567133904, 0.017071641981601715, 0.0042220083996653557, 0.0081062586978077888, 0.0038357248995453119, 0.0096963783726096153, 0.0056971954181790352, 0.019287463277578354, 0.004007992334663868, 0.012605691328644753, 0.0032763450872153044, 0.03588564321398735, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 11126, 4607, 8598, 2300, 3777, 4129, -4072, 4069, 2549, -2699, -3381, 4922, -3383, -4692, 7947, 1752, -1953, 2190, -1753, 3132, 374, 4214, -740, -2752, -264, -4914, 2650, -3971, 3635, 7800, 749, 374, 7489, 9859, 8083, 4551, 5294, -4380, 920, 4580, -653, -4615, 4102, 2392, 239, -6319, -11782, 2052, };
const TfArray<48, float> quant36_scale = { 48, { 0.00047690526116639376, 0.00066435401095077395, 0.00011887850996572524, 0.00080903491470962763, 0.00052546564256772399, 0.0004370436945464462, 0.0027317686472088099, 0.0015134210698306561, 0.0010780225275084376, 0.00053161464165896177, 0.00013755877444054931, 0.00053109502186998725, 0.00053008395479992032, 0.0013698214897885919, 0.00054255570285022259, 0.0017379751661792397, 0.0010306396288797259, 0.00030687850085087121, 0.001142713357694447, 0.0019814628176391125, 0.00074273697100579739, 0.00049135275185108185, 0.0001630128244869411, 0.00053290289361029863, 0.0013213420752435923, 0.00093164120335131884, 0.0010800252202898264, 0.00042484197183512151, 0.0013419666793197393, 0.00080035225255414844, 0.00028620744706131518, 0.00058529718080535531, 0.00090125680435448885, 0.00031722703715786338, 0.00052103801863268018, 0.00040745260776020586, 0.00057877664221450686, 0.0018853372894227505, 0.00059361534658819437, 0.00069615535903722048, 0.0012625725939869881, 0.00069683045148849487, 0.00085912708891555667, 0.00020368768309708685, 0.0014479540986940265, 0.0007776177953928709, 0.00084483739919960499, 0.00047311102389357984, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -102,-107,21,-127,-62,-1,-7,1, 
  /* [1][0][][] */ -127,-13,100,3,-51,20,2,15, 
  /* [2][0][][] */ 21,-13,20,127,24,-25,-20,-3, 
  /* [3][0][][] */ -106,-72,-28,-17,39,127,-46,-35, 
  /* [4][0][][] */ -6,-29,-9,-3,-10,10,-127,-67, 
  /* [5][0][][] */ -3,-36,-14,0,-12,12,-127,-69, 
  /* [6][0][][] */ 127,7,17,-10,-68,18,1,-5, 
  /* [7][0][][] */ -127,-27,-16,6,69,13,-1,10, 
  /* [8][0][][] */ 23,42,-11,-9,-29,-127,40,19, 
  /* [9][0][][] */ 73,22,-13,-7,-25,-2,-7,127, 
  /* [10][0][][] */ 112,-11,-116,8,-89,-9,43,127, 
  /* [11][0][][] */ -127,100,7,-35,86,-63,6,26, 
  /* [12][0][][] */ 127,-34,-105,12,54,-5,-8,-23, 
  /* [13][0][][] */ 127,12,16,-14,-30,27,9,-14, 
  /* [14][0][][] */ -123,-86,100,-24,75,-14,-41,-127, 
  /* [15][0][][] */ 33,71,0,-7,-10,-127,-17,9, 
  /* [16][0][][] */ -10,-68,11,3,12,127,12,6, 
  /* [17][0][][] */ 29,-125,-70,-3,-36,127,-54,-18, 
  /* [18][0][][] */ 39,-19,-15,-18,-20,25,127,-14, 
  /* [19][0][][] */ -4,23,-3,-127,-11,34,-4,-10, 
  /* [20][0][][] */ -76,-31,74,9,58,99,-2,-127, 
  /* [21][0][][] */ -22,-9,34,-25,-18,11,-127,-82, 
  /* [22][0][][] */ 71,-7,6,127,-16,-8,57,38, 
  /* [23][0][][] */ 127,-13,-116,-9,30,-23,12,5, 
  /* [24][0][][] */ -32,22,28,33,12,3,-127,-87, 
  /* [25][0][][] */ 127,11,-84,8,15,-7,7,25, 
  /* [26][0][][] */ 1,52,-32,-127,-28,22,1,0, 
  /* [27][0][][] */ 127,16,-108,0,-103,50,18,80, 
  /* [28][0][][] */ -127,-20,-20,17,54,10,-2,32, 
  /* [29][0][][] */ -10,-126,-15,-127,-12,26,-18,-21, 
  /* [30][0][][] */ 2,90,127,38,35,-110,112,39, 
  /* [31][0][][] */ -76,-7,-127,44,2,-26,97,102, 
  /* [32][0][][] */ -3,-120,3,-127,-10,10,-9,-19, 
  /* [33][0][][] */ 15,-127,-7,-117,6,17,0,-22, 
  /* [34][0][][] */ -30,-51,30,-100,36,-58,127,84, 
  /* [35][0][][] */ -127,12,54,4,-108,-25,31,94, 
  /* [36][0][][] */ -127,15,119,-2,-40,16,-30,37, 
  /* [37][0][][] */ 127,11,-5,-7,-73,19,0,16, 
  /* [38][0][][] */ -72,4,81,40,61,-54,44,127, 
  /* [39][0][][] */ -127,-3,77,1,-72,11,-10,4, 
  /* [40][0][][] */ -5,26,43,-16,26,-8,127,48, 
  /* [41][0][][] */ 127,-11,-74,3,55,14,6,-9, 
  /* [42][0][][] */ -13,-127,31,-9,16,6,-6,-18, 
  /* [43][0][][] */ 12,119,127,-5,55,-101,75,8, 
  /* [44][0][][] */ 6,-13,-3,117,0,-127,-2,3, 
  /* [45][0][][] */ 127,-32,36,-8,-63,108,8,2, 
  /* [46][0][][] */ 13,127,-17,105,1,126,23,39, 
  /* [47][0][][] */ -15,38,10,-28,28,-34,127,71, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0060424241237342358, 0.0084174135699868202, 0.001506199361756444, 0.010250531136989594, 0.0066576879471540451, 0.0055373753421008587, 0.03461170569062233, 0.019175155088305473, 0.013658624142408371, 0.0067355958744883537, 0.0017428796272724867, 0.0067290123552083969, 0.006716202013194561, 0.017355738207697868, 0.0068742199800908566, 0.022020271047949791, 0.013058279640972614, 0.0038881730288267136, 0.014478261582553387, 0.025105277076363564, 0.009410531260073185, 0.0062254751101136208, 0.0020653842948377132, 0.0067519182339310646, 0.016741499304771423, 0.011803961358964443, 0.01368399802595377, 0.0053827785886824131, 0.017002815380692482, 0.010140521451830864, 0.0036262690555304289, 0.0074157575145363808, 0.011418988928198814, 0.004019289743155241, 0.0066015892662107944, 0.0051624542102217674, 0.0073331422172486782, 0.023887360468506813, 0.0075211492367088795, 0.0088203391060233116, 0.015996886417269707, 0.0088288923725485802, 0.010885202325880527, 0.0025807376950979233, 0.018345683813095093, 0.0098524736240506172, 0.010704151354730129, 0.005994351115077734, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 3623, -3958, -48, 2493, 2214, 115, -2165, 1678, };
const TfArray<8, float> quant38_scale = { 8, { 7.1594266046304256e-05, 0.00016017489542718977, 9.7241012554150075e-05, 7.2579467087052763e-05, 0.00014264702622313052, 0.00019232559134252369, 0.00011004881525877863, 0.00020443208632059395, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -24,-3,-45,-34,-18,38,-127,-7, 
  /* [1][0][][] */ 18,88,-1,127,7,-8,-9,-36, 
  /* [2][0][][] */ 127,-5,-35,-56,-70,50,99,-54, 
  /* [3][0][][] */ 13,-127,44,-79,19,-82,27,57, 
  /* [4][0][][] */ 127,-3,-60,-7,29,-6,-127,-49, 
  /* [5][0][][] */ 3,-32,3,35,3,-127,-1,9, 
  /* [6][0][][] */ 127,-25,116,2,111,-28,-5,10, 
  /* [7][0][][] */ -127,-2,-92,-3,-98,8,35,8, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0030427561141550541, 0.0068074329756200314, 0.0041327429935336113, 0.0030846272129565477, 0.0060624983161687851, 0.0081738373264670372, 0.0046770744957029819, 0.0086883632466197014, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { -10831, 10795, 401, -12943, -651, -13507, 164, 136, };
const TfArray<8, float> quant40_scale = { 8, { 0.00042032942292280495, 0.00043617829214781523, 0.00021988441585563123, 0.00044740128214471042, 0.00053640035912394524, 0.00037579081254079938, 0.0016590178711339831, 0.0024544461630284786, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ 0,2,13,17,11,0,9,31, 7,3,-39,127,-22,0,-4,31, -4,1,-10,19,-1,1,-6,22, 
  /* [0][1][][] */ -4,-2,127,-24,127,0,-111,42, 127,-127,-104,6,-91,127,-14,-127, -27,4,15,-20,-1,1,127,39, 
  /* [0][2][][] */ 0,0,10,2,10,0,15,34, 4,3,-45,-4,-13,3,-10,-104, -3,0,-11,-1,1,-2,-6,38, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.017864000052213669, 0.018537577241659164, 0.0093450872227549553, 0.019014554098248482, 0.022797014564275742, 0.0159711092710495, 0.070508256554603577, 0.10431396216154099, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 12111, 8999, -356, 36108, 3670, 10879, 112001, 4361, };
const TfArray<8, float> quant42_scale = { 8, { 0.00020800007041543722, 0.00022636834182776511, 0.0001271462970180437, 7.3852417699526995e-05, 0.0002004992711590603, 0.00022933182481210679, 1.059548321791226e-05, 3.9770409784978256e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 50, 9, 
  /* [0][1][][] */ -127, 122, 0, 
  /* [0][2][][] */ -42, 46, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -43, 
  /* [1][2][][] */ 7, -41, 6, 
  /* [2][0][][] */ 31, 28, -46, 
  /* [2][1][][] */ 52, 69, -127, 
  /* [2][2][][] */ 21, 32, -58, 
  /* [3][0][][] */ 42, 52, 20, 
  /* [3][1][][] */ 53, 74, 26, 
  /* [3][2][][] */ -80, -127, -57, 
  /* [4][0][][] */ 4, -53, 47, 
  /* [4][1][][] */ 15, -127, 111, 
  /* [4][2][][] */ 5, -37, 32, 
  /* [5][0][][] */ 2, -57, 0, 
  /* [5][1][][] */ -1, 127, 2, 
  /* [5][2][][] */ 1, -76, 0, 
  /* [6][0][][] */ -17, -85, 2, 
  /* [6][1][][] */ -26, -127, -4, 
  /* [6][2][][] */ -13, -53, 7, 
  /* [7][0][][] */ 45, -127, 32, 
  /* [7][1][][] */ -18, -2, -9, 
  /* [7][2][][] */ -24, 76, -10, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.069752424955368042, 0.075912192463874817, 0.042638268321752548, 0.024766268208622932, 0.067237049341201782, 0.076905988156795502, 0.003553174901753664, 0.013336931355297565, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant46_scale = { 1, { 0.07449766993522644, } };
const TfArray<1, int> quant46_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<1, float> quant47_scale = { 1, { 0.078926146030426025, } };
const TfArray<1, int> quant47_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.070521995425224304, } };
const TfArray<1, int> quant51_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.087570756673812866, } };
const TfArray<1, int> quant54_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<1, float> quant55_scale = { 1, { 0.098533943295478821, } };
const TfArray<1, int> quant55_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.067148797214031219, } };
const TfArray<1, int> quant59_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<1, float> quant60_scale = { 1, { 0.02298659086227417, } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.033085785806179047, } };
const TfArray<1, int> quant62_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant63_scale = { 1, { 0.081587068736553192, } };
const TfArray<1, int> quant63_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.050754744559526443, } };
const TfArray<1, int> quant66_zero = { 1, { -43 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<1, float> quant67_scale = { 1, { 0.088003054261207581, } };
const TfArray<1, int> quant67_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.033640149980783463, } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.051841538399457932, } };
const TfArray<1, int> quant70_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_783340_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_783340_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_783340_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_783340_3_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_783340_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
